{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"blog/","title":"Danh s\u00e1ch b\u00e0i vi\u1ebft","text":""},{"location":"blog/git-workflow/","title":"Git workflow","text":"<p>For software development projects, the Git tool plays an important role in version management and supporting members to work effectively together. The following article is the theoretical and practical content shared at the training session and is also part of the software development process being applied at TickLab.</p>"},{"location":"blog/git-workflow/#the-main-branches","title":"The main branches","text":"<p>A repository must have at least these two main branches:</p> <ol> <li>main: where the source code is stable and has been released to production.</li> <li>staging: where the source code is latest, ready to be merged into the main branch for the next release.</li> </ol> <p>Note: All branches above are protected to prevent direct commit.</p> <p>Follow these steps:</p> <ol> <li>Clone a repository on github, example: https://github.com/ngyngcphu/mkdocs-tool</li> <li>Connect repository from local to remote:     <pre><code>git remote add origin &lt;remote_url&gt;\n</code></pre></li> <li>Push branch main up to remote:     <pre><code>git push origin main\n</code></pre></li> <li>Create branch staging from main:     <pre><code>git checkout -b staging main\n</code></pre></li> <li>Push branch develop up to remote:     <pre><code>git push origin staging\n</code></pre></li> <li>Set protection rules for 2 branches: main and staging at <code>Settings-&gt;Branches-&gt;Add branch protection rule</code>.</li> </ol> <p> </p> Branch main and branch staging"},{"location":"blog/git-workflow/#the-supporting-branches","title":"The supporting branches","text":"<p>Besides the main branches, there will be support branches so that team members can work in parallel, easily track features, prepare for release or quickly fix production and staging issues. These support branches will be deleted after using, including:</p> <ol> <li>Feature branches</li> <li>Hotfix branches</li> <li>Bugfix branches</li> <li>Test branches</li> <li>Release branches (Optional)</li> </ol> <p>Using the release branches may not be necessary. Instead, the TickFlow team used a tool that automatically generates releases based on conventional commits, that is release-please-action.</p>"},{"location":"blog/git-workflow/#conventional-commit-messages","title":"Conventional Commit Messages","text":""},{"location":"blog/git-workflow/#summary","title":"Summary","text":"<p>The commit message should be structured as follows: <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n</code></pre> The following structural elements:</p> <ol> <li>fix: a commit of the type <code>fix</code> patches a bug in your codebase.</li> <li>feat: a commit of the type <code>feat</code> introduces a new feature to the codebase</li> <li>types other than <code>fix:</code> and <code>feat:</code> are allowed, recommends <code>build:</code>, <code>chore:</code>, <code>ci:</code>, <code>docs:</code>, <code>style:</code>, <code>refactor:</code>, <code>perf:</code>, <code>test:</code>, and others (based on the Angular convention).</li> </ol> <p>A scope may be provided to a commit\u2019s type, to provide additional contextual information and is contained within parenthesis, e.g., <code>feat(parser): add ability to parse arrays</code>. For more detailed information, refer to Convention Commits.</p>"},{"location":"blog/git-workflow/#commitlint-tool","title":"Commitlint tool","text":"<p>Tool checks if your commit messages meet the conventional commit format, helps your team adhere to a commit convention.</p> <p>Follow these steps:</p> <ol> <li>Install:     <pre><code>yarn add -D @commitlint/{config-conventional,cli}\n</code></pre></li> <li>Configure:     <pre><code>echo \"module.exports = {extends: ['@commitlint/config-conventional']}\" &gt; commitlint.config.js\n</code></pre></li> <li>To lint commits before they are created you can use Husky's <code>commit-msg</code> hook:     <pre><code>yarn add -D husky\nyarn husky install\n</code></pre></li> <li>Add hook:     <pre><code>yarn husky add .husky/commit-msg  'npx --no -- commitlint --edit ${1}'\n</code></pre></li> <li>Test the hook:     </li> <li>Add script in <code>package.json</code> to automatically enable git hook after installing packages by <code>yarn</code>:     <pre><code>\"script\": {\n    \"prepare\": \"husky install\"\n},\n</code></pre></li> </ol>"},{"location":"blog/git-workflow/#feature-branches","title":"Feature branches","text":"<ul> <li>Branch off from: staging</li> <li>Merge back into: staging</li> <li>Branch naming convention: feature/**</li> </ul> <p>Feature branches are used to develop new features for the upcoming releases. Each feature will be a separate branch, created from the latest source code of staging, example: feature/project, feature/member,... After completing the features, features branch will be merged into staging and deleted.</p> <p>Follow these steps:</p> <ol> <li>Create a feature branch, ex: feature/part_1 from staging:     <pre><code>git checkout -b feature/part_1 staging\n</code></pre></li> <li>Make some changes to feature/part_1.</li> <li>Commit and push feature/part_1 up to remote:     <pre><code>git push origin feature/part_1\n</code></pre></li> </ol> <p> </p> Feature branches <p>After completing all the code in feature/part_1, make a Pull requests to staging. Then, add reviewers.</p> <p>Note: All conversations on code must be resolved before a pull request can be merged into a branch.</p> <p>After pull request has been merged into staging branch on remote. At local, checkout staging, delete feature/part_1 and pull latest code from remote. <pre><code>git checkout staging\ngit branch -D feature/part_1\ngit pull origin staging\n</code></pre></p> <p>Note: A pull request must not exceed 20 files changed. If the feature is too big (&gt; 20 files changed), it should be split into sub-branches, like that: sub-feature-part_1/search-project,...Then, make a pull request from sub-feature-part_1/search-project to feature/part_1, same as above.</p>"},{"location":"blog/git-workflow/#hotfix-and-bugfix-branches","title":"Hotfix and bugfix branches","text":""},{"location":"blog/git-workflow/#hotfix","title":"Hotfix","text":"<ul> <li>Branch off from: main</li> <li>Merge back into: main and staging</li> <li>Branch naming convention: hotfix/**</li> </ul> Hotfix branch Branches structure after merging hotfix"},{"location":"blog/git-workflow/#bugfix","title":"Bugfix","text":"<ul> <li>Branch off from: staging</li> <li>Merge back into: staging</li> <li>Branch naming convention: bugfix/**</li> </ul> Bugfix branch Branches structure after merging bugfix <p>Hotfix and bugfix branches are utilized to address issues that arise in a system. When a problem occurs, we gather information about how it happened (reproduction case) and promptly take corrective action to restore the system's functionality. This quick fix is applied in the hotfix branch. Following this, we investigate the underlying cause of the problem and take more comprehensive measures to prevent similar issues from occurring in the future. These longer-term solutions are implemented in the bugfix branch.</p>"},{"location":"blog/git-workflow/#test-branches","title":"Test branches","text":"<ul> <li>Branch off from: any branch</li> <li>Merge back into: none</li> <li>Branch naming convention: test/**</li> </ul> <p>If you come up with an idea, like a new method for coding or want to add a new tool to the project, you can try it out in a test branch. This lets you test the idea with safety and separation, reducing the potential impact on the main project.</p>"},{"location":"blog/git-workflow/#release","title":"Release","text":""},{"location":"blog/git-workflow/#github-action-workflows","title":"Github Action Workflows","text":"<p>A workflow is a configurable automated process that will run one or more jobs. Workflows are defined by a YAML file in the <code>.github/workflows</code> directory of your repository, can be triggered by events like <code>push</code>, <code>pull-requests</code> or on a <code>schedule</code>.</p> <p>Release workflow is defined in file <code>release.yml</code>.</p>"},{"location":"blog/git-workflow/#release-please-action-tool","title":"Release-please-action tool","text":"<p>A tool auto-release with Conventional Commit Message. </p> <p>Set up this action in <code>.github/workflows/release.yml</code>: <pre><code>release:\n    runs-on: ubuntu-latest\n    outputs:\n      build: ${{ steps.release.outputs.release_created }}\n      tag_name: ${{ steps.release.outputs.tag_name }}\n    steps:\n      - uses: google-github-actions/release-please-action@v3\n        id: release\n        with:\n          release-type: node\n          pull-request-header: 'Bot (:robot:) requested to create a new release on ${{ github.ref_name }}'\n</code></pre> Also, let's create a <code>build</code> job to build a package on github container registry (ghcr). This package is a docker image used to run docker-compose.</p> <p>Note: The release pull request generated by the github-action bot is not allowed to merged into <code>main</code> until the product is fully featured.</p>"},{"location":"blog/git-workflow/#github-project","title":"Github Project","text":"<p>GitHub is a platform for software developers to collaborate and manage not just their code but the overall project planning and task-tracking process through a feature called \u201cGitHub Project\u201d. A project provides various views: spreadsheet, task board, or roadmap integrated with your issues and pull requests, which help your management process always stay up-to-date with the developing process.</p>"},{"location":"blog/git-workflow/#setting-up-projects","title":"Setting up projects","text":"<ol> <li>We can navigate to the \u201cProjects\u201d tab from the header.  </li> <li>Create your first project by clicking on the \u201cNew project\u201d button.</li> <li>You can either \u201cStart from scratch\u201d or use the provided \u201cProject template\u201d (highly recommended) to get a grasp of this feature. </li> <li>Play around with different types of views that your team would be more comfortable with.</li> </ol>"},{"location":"blog/git-workflow/#creating-and-managing-tasklist","title":"Creating and managing tasklist","text":""},{"location":"blog/git-workflow/#getting-familiar-with-issues","title":"Getting familiar with issues","text":"<ol> <li> <p>A task before converting into issues is just a draft task that doesn\u2019t belong to any repository.  </p> </li> <li> <p>After converting them into issues, we would be able to assign tasks to team members and relate them to pull requests and that issue will reside inside a repository. </p> </li> <li> <p>Each issue has an ID. If you mention an issue in the description section of another issue, it then can be understood as a subtask. </p> </li> <li> <p>Use the checklist symbol before mentioning an issue ID so that it can display similar to the above. </p> </li> </ol>"},{"location":"blog/git-workflow/#manage-issue-via-cli","title":"Manage issue via CLI","text":"<p>GitHub also offers issues and project management directly from CLI. - Installation: GitHub CLI. - Command guideline: GitHub Issues || GitHub Project</p>"},{"location":"blog/git-workflow/#add-detailed-information-to-your-tasks","title":"Add detailed information to your tasks","text":"<p>GitHub provides various data types to add more information to your task:</p> <ul> <li>A date field to track target ship dates.</li> <li>A number field to track the complexity of a task.</li> <li>A single select field to track whether a task is a Low, Medium, or High priority.</li> <li>A text field to add a quick note.</li> <li>An iteration field to plan work week-by-week, including support for breaks. </li> </ul> <p>After converting into issues, you can also add repository information into your task:</p> <ul> <li>A member of your team to handle the task</li> <li>A milestone of your project</li> <li>A pull request </li> </ul> <p>Limitation: GitHub free plan would limit some features if you make your repository    private, some might be: - Can only assign 1 member to an issue - Can't track both private and public repository in 1 project</p>"},{"location":"blog/git-workflow-in-practice/","title":"Git workflow in practice","text":"<p>This is the sample project for Git workflow article. If you haven't already read it, it's recommended to give it a glance before attempting this project. Upon completion of this project, you will:</p> <ul> <li>Gain a clearer understanding of how Git workflow operates in practice.</li> <li>Be exposed to a simple debugging process.</li> </ul>"},{"location":"blog/git-workflow-in-practice/#setup-project","title":"Setup project","text":"<p>First, make sure you already have Git installed on your computer and a GitHub account. To check git is installed:</p> <pre><code>git --version\n</code></pre> <p>If this is the first time you use git, you need to set a git username and git email, you can remove the \u2014global flag if you want to set a user name and user email for a specific repository:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> <p>Check you already set the git user name and user email:</p> <pre><code>git config --global user.name\ngit config --global user.email\n</code></pre> <p>You need to create a repository in GitHub, let's give it a git-workflow-example name.</p> <p></p> <p>Tick at the \u201cAdd a README file\u201d option. Let all remaining setting is default then click the \"Create repository\" button.</p> <p></p> <p>Save the link to the repository, you will need it later, with this tutorial, we will use HTTPS.</p> <p>In the upper left, click on the branch button.</p> <p>Click on the View all branches.</p> <p>Click New branch, naming branch is staging, source is main.</p> <p>Go to Settings \u2192 Branches \u2192 Add rule.</p> <p>Create two sets of rules for main and staging, with the following rule chosen:</p> <ul> <li>Require a pull request before merging.</li> <li>Require status checks to pass before merging.<ul> <li>Require branches to be up to date before merging. </li> </ul> </li> </ul> <p>These rules make sure our project follows the git workflow.</p> <p>Open the terminal in your computer, clone the repository you have just created then change the directory to it:</p> <pre><code>git clone https://github.com/your-username/git-workflow-example.git\ncd git-workflow-example\n</code></pre>"},{"location":"blog/git-workflow-in-practice/#create-new-feature","title":"Create new feature","text":""},{"location":"blog/git-workflow-in-practice/#add-hello-world-line","title":"Add hello world line","text":"<p>In this example, the image you are given the task of adding \u201cHello World!\u201d to the README.md file</p> <p>Before starting, we need to have the staging branch in the local repository:</p> <pre><code>git switch staging\n</code></pre> <p>First, we need to create a new branch for this feature:</p> <pre><code>git checkout -b feature/adding-hello-world-line staging\n</code></pre> <p>Add a line to README.md:</p> <pre><code>printf \"\\n\" &gt;&gt; README.md\necho \"Hello World!\" &gt;&gt; README.md\n</code></pre> <p>Commit the current workspace to the local repository:</p> <pre><code>git add .\ngit commit -m \"feat(hello-world): add hello world file\"\n</code></pre> <p>Create a new branch and push your change to GitHub:</p> <pre><code>git push origin -u feature/adding-hello-world-line\n</code></pre> <p>This may ask you for credentials if this is the first time you are using Git, you can follow this to create a GitHub personal access token to identify.</p> <p>Notice: GitHub removed Support for password authentication on August 13, 2021.</p> <p>Before identifying, you can run this to avoid entering credentials multiple times:</p> <pre><code>git config credential.helper store\n</code></pre> <p>Go to your project in GitHub and create a Pull Request. Changing base branch to staging.</p> <p></p> <p>In practice, you will receive some reviews from others. For now, merge the new branch to staging then delete it.</p> <p></p>"},{"location":"blog/git-workflow-in-practice/#add-release-github-action","title":"Add release GitHub action","text":"<p>This time, you are asked to add GitHub action to release a new version whenever the staging branch is merged to the main branch.</p> <p>If you want to know more about GitHub action, try visiting this.</p> <p>Create a new feature branch:</p> <pre><code>git checkout staging\ngit pull\ngit checkout -b feature/add-release-action\n</code></pre> <p>The branch feature/adding-hello-world-line has been merged to staging, so you can delete it:</p> <pre><code>git branch -d feature/adding-hello-world-line\n</code></pre> <p>To create a GitHub action, first let\u2019s create a .github folder, create a workflows folder in .github:</p> <pre><code>mkdir .github &amp;&amp; cd $_\nmkdir workflows &amp;&amp; cd $_\n</code></pre> <p>In the workflows folder, create a file name release.yml and give the file permission to edit content:</p> <pre><code>touch release.yml\nchmod +w release.yml\n</code></pre> <p>You can use any editor you want, this tutorial will use vim to change file content.</p> <p>Open file with Vim:</p> <pre><code>vim release.yml\n</code></pre> <p>Paste the content below to release.yml:</p> <pre><code>name: release\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - '*.md'\nenv:\n  REGISTRY: ghcr.io\n  ORG_USERNAME: ${{ github.actor }}\n\npermissions:\n  contents: write\n  pull-requests: write\n  packages: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    outputs:\n      build: ${{ steps.release.outputs.release_created }}\n      tag_name: ${{ steps.release.outputs.tag_name }}\n    steps:\n      - uses: google-github-actions/release-please-action@v3\n        id: release\n        with:\n          release-type: simple\n          pull-request-header: 'Bot (:robot:) requested to create a new release on ${{ github.ref_name }}'\n</code></pre> <p>Entering :wq to save and close the file.</p> <p>Commit the change and push the new feature branch to the remote repo:</p> <pre><code>git add .\ngit commit -m \"feat(github action): implement github action for release\"\ngit push origin -u feature/add-release-action\n</code></pre> <p>Go to GitHub, create and merge a pull request of the new branch to staging.</p> <p></p> <p>To GitHub action can release a new version in your repository, you need to allow action can create and approve pull requests.</p> <p>Go to the settings of your repository. </p> <p>Go to Action &gt; General, and tick \u201cAllow GitHub Actions can create pull requests or submit approving pull request reviews\u201d at the end of the page. Save the setting.</p> <p></p> <p>Okay, now GitHub action will auto-release a new version of our app whenever any branch merges with the main branch.</p>"},{"location":"blog/git-workflow-in-practice/#release-new-version","title":"Release new version","text":"<p>It may need more features, and more processes to merge code from staging to main and release a new version. In this tutorial, simply create a pull request and merge staging to the main.</p> <p></p> <p>The GitHub action will create new pull request with information about our new release, and merge it to the main.</p> <p></p> <p>You have just finished creating a new version using the git workflow. The CHANGELOG.md file contains information on our releases.</p> <p></p>"},{"location":"blog/git-workflow-in-practice/#hotfix-and-bugfix","title":"Hotfix and Bugfix","text":""},{"location":"blog/git-workflow-in-practice/#about-the-problem","title":"About the problem","text":"<p>Image your co-worker\u2019s release a new version containing a script to automate adding a new line to the content of the README.md file.</p> <p>The expected render result is.</p> <p></p> <p>Let's see the repository.</p> <p></p> <p>Oop! The rendered result is different from what we expected.</p>"},{"location":"blog/git-workflow-in-practice/#fork-repository","title":"Fork repository","text":"<p>In this section, we will address this bug using a Git workflow. Since we don't have permission to directly modify this repository, we will fork it, make the necessary changes, push them, and create pull requests.</p> <p>Click the \u201cFork\u201d button in the upper right, and give it a new name git-workflow-sample to distinguish the one you created above. Let all remaining setting is the default.</p> <p>Clone the new repository we have just forked to make some changes in that code:</p> <pre><code>git clone https://github.com/your-user-name/git-workflow-sample.git\ncd git-workflow-sample\n</code></pre>"},{"location":"blog/git-workflow-in-practice/#hotfix-branch","title":"Hotfix branch","text":"<p>The first thing we need to do when our application exhibits incorrect behavior is to resolve the issue as quickly as possible, ensuring that users can continue using our service.</p> <p>See the CHANGELOG.md to know more details about your co-worker\u2019s release.</p> <p></p> <p>We will create a new hotfix branch, reverting back to version 1.0.0, to ensure that users can continue using our service before your co-worker's script is added.</p> <pre><code>git checkout -b 'hotfix/back-to-before-newline-script-is-added' main\n</code></pre> <p>See the history of commits:</p> <pre><code>git log\n</code></pre> <p></p> <p>We will revert the code to version 1.0.0 is released:</p> <pre><code>git revert -m 1 --no-commit 9cb11c..HEAD\n</code></pre> <p>Let's see the content of README.md:</p> <pre><code>cat README.md\n</code></pre> <p>Continue revert the code:</p> <pre><code>git revert --continue\n</code></pre> <p>An editor will show, by default, it will be nano, press Ctrl + O \u2192 Enter \u2192 Ctrl + X to save and out of the editor.</p> <p>Push our change to the remote repository and create a new pull request:</p> <pre><code>git push -u origin hotfix/back-to-before-newline-script-is-added\n</code></pre> <p>This will create a hotfix/back-to-before-newline-script-is-added branch in your remote repository and push your code to this branch.</p> <p>Create pull requests to the main and staging branches. Our user can continue using our service after your pull request is approved and merged.</p> <p></p>"},{"location":"blog/git-workflow-in-practice/#bugfix-branch","title":"Bugfix branch","text":"<p>After making a hotfix to keep our service still working, we need to make deep remediation to root the problem and avoid it happening again in the future.</p> <p>It seems the newline script is overwritten instead of appending the newline to it, let's see the script in detail and fix the problem.</p> <p>The image of the hotfix branch you have just created is approved and merged with the main and staging branch. Following the git workflow, you will create a bug fix branch from the staging branch, but for now, we make a new bugfix branch from the hotfix branch.</p> <p>Make sure you are currently in the hotfix branch:</p> <pre><code>git checkout 'hotfix/back-to-before-newline-script-is-added'\n</code></pre> <p>Create a new bugfix branch:</p> <pre><code>git checkout -b 'bugfix/let-newline-script-append-newline-to-README.md-file'\n</code></pre> <p>Revert branch to the script is done by your co-worker:</p> <pre><code>git revert --no-commit 4c5be7..HEAD\n</code></pre> <p>First, recover the content of README.md:</p> <pre><code>echo \"# git-workflow\n\nHello World!\" &gt; README.md\n</code></pre> <p>See the current content of README.md:</p> <pre><code>cat README.md\n</code></pre> <p></p> <p>Then see the content of newline.sh:</p> <pre><code>cat newline.sh\n</code></pre> <p></p> <p>In the \"append the new text to the file\" section, your co-worker used the '&gt;' operator, which overwrites the content of the file. Try changing it to the '&gt;&gt;' operator to see if it resolves the problem.</p> <p>Give newline.sh file permission to write and execute:</p> <pre><code>chmod +x+w newline.sh\n</code></pre> <p>Open file with Vim:</p> <pre><code>vim newline.sh\n</code></pre> <p>Enter i to access insert mode, change &gt; to &gt;&gt; operator</p> <p>Press the \u201cEsc\u201d then type :wq to save the change, and close the file.</p> <p>Execute the script and see if it works as we expect:</p> <pre><code>./newline.sh\n</code></pre> <p>See content of README.md:</p> <pre><code>cat README.md\n</code></pre> <p></p> <p>Nice, now the script works correctly.</p> <p>Commit the change, and push it to the remote repository.</p> <pre><code>git add .\ngit commit -m 'fix(newline.sh): replace &gt; by &gt;&gt; to let newline is append to exist README.md content'\ngit push -u origin bugfix/let-newline-script-append-newline-to-README.md-file\n</code></pre> <p>Create a pull request to merge your change to the staging branch</p> <p></p> <p>Good job! You have just completely debugged a problem with the git workflow.</p>"},{"location":"blog/edge-detection/","title":"Edge detection","text":"<p>Trong giai \u0111o\u1ea1n \u0111\u1ea7u c\u1ee7a qu\u00e1 tr\u00ecnh x\u1eed l\u00fd \u1ea3nh, ch\u00fang ta mong mu\u1ed1n \u0111\u00fac k\u1ebft ra nh\u1eefng th\u00f4ng tin v\u1ec1 c\u1ea5u tr\u00fac c\u0169ng nh\u01b0 t\u00ednh ch\u1ea5t c\u1ee7a c\u00e1c v\u1eadt th\u1ec3 trong \u1ea3nh. \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u n\u00e0y, vi\u1ec7c t\u00ecm ra nh\u1eefng \u0111\u1eb7c tr\u01b0ng c\u01a1 b\u1ea3n (feature) c\u1ee7a c\u00e1c v\u1eadt th\u1ec3 n\u00e0y l\u00e0 c\u1ea7n thi\u1ebft. C\u1ea1nh (edge) l\u00e0 m\u1ed9t trong nh\u1eefng \u0111\u1eb7c tr\u01b0ng n\u00e0y.  Ch\u00fang ta c\u00f9ng quan s\u00e1t hai b\u1ee9c \u1ea3nh sau:</p> <p> </p> <p>H\u00ecnh 1: B\u00ean tr\u00e1i: \u1ea2nh ch\u1ee5p b\u1ee9c t\u01b0\u1ee3ng The Archer c\u1ee7a Henry Moore (1964). B\u00ean ph\u1ea3i: B\u1ea3n ph\u00e1c th\u1ea3o c\u1ee7a b\u1ee9c t\u01b0\u1ee3ng n\u00e0y. \u1ea2nh tham kh\u1ea3o t\u1eeb [4].   </p> <p>Tuy \u0111\u00e3 gi\u1ea3n l\u01b0\u1ee3c r\u1ea5t nhi\u1ec1u chi ti\u1ebft v\u00e0 ch\u1ec9 l\u01b0u l\u1ea1i nh\u1eefng \u0111\u01b0\u1eddng n\u00e9t n\u1ed5i b\u1eadt nh\u1ea5t, b\u1ee9c \u1ea3nh b\u00ean ph\u1ea3i v\u1eabn b\u1ea3o to\u00e0n \u0111\u01b0\u1ee3c m\u1ed9t l\u01b0\u1ee3ng th\u00f4ng tin \u0111\u1ee7 \u0111\u1ec3 gi\u00fap ta h\u00ecnh dung \u0111\u01b0\u1ee3c m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng k\u1ebft c\u1ea5u v\u00e0 m\u1ed9t v\u00e0i \u0111\u1eb7c \u0111i\u1ec3m nh\u1ea5t \u0111\u1ecbnh c\u1ee7a v\u1eadt th\u1ec3 trong b\u1ee9c \u1ea3nh g\u1ed1c. Do v\u1eady, nh\u1eadn di\u1ec7n c\u1ea1nh th\u01b0\u1eddng l\u00e0 m\u1ed9t trong nh\u1eefng b\u01b0\u1edbc \u0111\u1ea7u ti\u00ean c\u1ee7a qu\u00e1 tr\u00ecnh kh\u00f4i ph\u1ee5c th\u00f4ng tin t\u1eeb m\u1ed9t b\u1ee9c \u1ea3nh. C\u0169ng b\u1edfi vai tr\u00f2 quan tr\u1ecdng n\u00e0y n\u00ean b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh v\u1eabn ti\u1ebfp t\u1ee5c l\u00e0 m\u1ed9t l\u0129nh v\u1ef1c \u0111\u01b0\u1ee3c nghi\u00ean c\u1ee9u \u0111\u01b0\u1ee3c quan t\u00e2m r\u1ed9ng r\u00e3i. Trong b\u00e0i vi\u1ebft n\u00e0y, ch\u00fang ta s\u1ebd c\u00f9ng nhau t\u00ecm hi\u1ec3u nh\u1eefng kh\u00e1i ni\u1ec7m c\u01a1 b\u1ea3n li\u00ean quan \u0111\u1ebfn b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh, c\u00e1c v\u1ea5n \u0111\u1ec1 th\u01b0\u1eddng g\u1eb7p trong b\u00e0i to\u00e1n n\u00e0y c\u0169ng nh\u01b0 nh\u1eefng thu\u1eadt to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh th\u00f4ng d\u1ee5ng.</p>"},{"location":"blog/edge-detection/#1-mot-vai-khai-niem","title":"1. M\u1ed9t v\u00e0i kh\u00e1i ni\u1ec7m","text":""},{"location":"blog/edge-detection/#11-anh-trang-en-grayscale-image","title":"1.1. \u1ea2nh tr\u1eafng \u0111en (grayscale image)","text":"<p>B\u00e0i vi\u1ebft n\u00e0y ch\u1ec9 s\u1eed d\u1ee5ng \u1ea3nh grayscale l\u00e0m minh h\u1ecda cho b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh. \u1ea2nh grayscale \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng c\u00f3 gi\u00e1 tr\u1ecb pixel dao \u0111\u1ed9ng trong kho\u1ea3ng t\u1eeb 0 \u0111\u1ebfn 255 v\u1edbi 0 l\u00e0 m\u00e0u \u0111en v\u00e0 255 l\u00e0 m\u00e0u tr\u1eafng, c\u00e1c gi\u00e1 tr\u1ecb \u1edf gi\u1eefa l\u00e0 nh\u1eefng s\u1eafc th\u00e1i x\u00e1m kh\u00e1c nhau \u0111\u01b0\u1ee3c pha tr\u1ed9n theo m\u1ed9t t\u1ec9 l\u1ec7 nh\u1ea5t \u0111\u1ecbnh hai m\u00e0u \u0111en v\u00e0 tr\u1eafng n\u00e0y. C\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a pixel \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u1ee9c \u0111\u1ed9 x\u00e1m (gray level), gi\u00e1 tr\u1ecb n\u00e0y trong m\u1ed9t s\u1ed1 t\u00e0i li\u1ec7u c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 c\u01b0\u1eddng \u0111\u1ed9 \u1ea3nh (image intensity) hay c\u01b0\u1eddng \u0111\u1ed9 (intensity).</p> <p> </p> <p>H\u00ecnh 2: D\u00e3y m\u00e0u cho \u1ea3nh grayscale (\u0111\u1ec3 \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb c\u1ee7a pixel c\u00e0ng th\u1ea5p c\u00f3 m\u00e0u ng\u1ea3 sang \u0111en nhi\u1ec1u h\u01a1n v\u00e0 ng\u01b0\u1ee3c l\u1ea1i). \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.   </p>"},{"location":"blog/edge-detection/#12-cach-anh-chi-so-cac-pixel","title":"1.2. C\u00e1ch \u0111\u00e1nh ch\u1ec9 s\u1ed1 c\u00e1c pixel","text":"<p>Trong m\u1eb7t ph\u1eb3ng \u1ea3nh, ta th\u01b0\u1eddng \u0111\u1eb7t g\u1ed1c t\u1ecda \u0111\u1ed9 \u1edf trung t\u00e2m, tia Ox h\u01b0\u1edbng t\u1eeb tr\u00e1i sang ph\u1ea3i v\u00e0 tia Oy h\u01b0\u1edbng t\u1eeb d\u01b0\u1edbi l\u00ean tr\u00ean. Tuy nhi\u00ean khi s\u1ed1 h\u00f3a th\u00ec b\u1ee9c \u1ea3nh \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n b\u1eb1ng m\u1ed9t m\u1ea3ng 2 chi\u1ec1u, trong \u0111\u00f3 m\u1ed7i ph\u1ea7n t\u1eed l\u01b0u gi\u00e1 tr\u1ecb c\u1ee7a pixel \u1edf v\u1ecb tr\u00ed t\u01b0\u01a1ng \u1ee9ng. L\u01b0u \u00fd r\u1eb1ng \u0111\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi m\u1ed9t b\u1ee9c \u1ea3nh, ta c\u1ea7n chuy\u1ec3n b\u1ee9c \u1ea3nh n\u00e0y th\u00e0nh d\u1ea1ng s\u1ed1, l\u00fac n\u00e0y b\u1ee9c \u1ea3nh kh\u00f4ng c\u00f2n gi\u1eef \u0111\u01b0\u1ee3c t\u00ednh \"li\u00ean t\u1ee5c\" c\u1ee7a n\u00f3 n\u1eefa m\u00e0 b\u1ecb \"l\u01b0\u1ee3ng h\u00f3a\" (quantized) th\u00e0nh c\u00e1c \u0111\u01a1n v\u1ecb nh\u1ecf g\u1ecdi l\u00e0 c\u00e1c pixel. Th\u00f4ng th\u01b0\u1eddng ng\u01b0\u1eddi ta \u0111\u00e1nh ch\u1ec9 s\u1ed1 c\u00e1c pixel nh\u01b0 sau: m\u1ed7i pixel c\u00f3 ch\u1ec9 s\u1ed1 \\([i,j]\\), trong \u0111\u00f3 \\(i\\) t\u0103ng d\u1ea7n t\u1eeb tr\u00e1i sang ph\u1ea3i, \\(j\\) t\u0103ng d\u1ea7n t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi, pixel tr\u00ean c\u00f9ng b\u00ean tr\u00e1i c\u00f3 ch\u1ec9 s\u1ed1 \\([0,0]\\).</p> <p> </p> <p>H\u00ecnh 3: M\u1ed9t \u0111i\u1ec3m tr\u00ean m\u1eb7t ph\u1eb3ng \u1ea3nh v\u00e0 pixel t\u01b0\u01a1ng \u1ee9ng bi\u1ec3u di\u1ec5n \u0111i\u1ec3m \u1ea3nh \u1ea5y (l\u01b0u \u00fd r\u1eb1ng nhi\u1ec1u \u0111i\u1ec3m \u1ea3nh c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n b\u1edfi m\u1ed9t pixel duy nh\u1ea5t). \u1ea2nh tham kh\u1ea3o t\u1eeb [1].   </p>"},{"location":"blog/edge-detection/#13-phep-tich-chap-convolution","title":"1.3. Ph\u00e9p t\u00edch ch\u1eadp (convolution)","text":"<p>Ph\u00e9p t\u00edch ch\u1eadp c\u00f3 quan h\u1ec7 m\u1eadt thi\u1ebft \u0111\u1ebfn ph\u00e9p t\u01b0\u01a1ng quan ch\u00e9o (cross correlation). Trong ph\u00e9p t\u01b0\u01a1ng quan ch\u00e9o, ta c\u00f3 m\u1ed9t h\u1ea1t nh\u00e2n (kernel) v\u1edbi m\u1ed9t ph\u1ea7n t\u1eed trung t\u00e2m (center) v\u00e0 m\u1ed9t m\u1ea3ng \u0111\u1ea7u v\u00e0o, l\u1ea7n l\u01b0\u1ee3t tr\u01b0\u1ee3t kernel t\u1eeb g\u00f3c tr\u00ean c\u00f9ng b\u00ean tr\u00e1i c\u1ee7a m\u1ea3ng \u0111\u1ea7u v\u00e0o theo chi\u1ec1u t\u1eeb tr\u00e1i sang ph\u1ea3i, t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi. T\u1ea1i m\u1ed7i ph\u1ea7n t\u1eed c\u1ee7a m\u1ea3ng \u0111\u1ea7u v\u00e0o m\u00e0 trung t\u00e2m kernel n\u00e0y tr\u01b0\u1ee3t \u0111\u1ebfn, gi\u00e1 tr\u1ecb c\u1ee7a ph\u1ea7n t\u1eed n\u00e0y \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00e1ch nh\u00e2n gi\u00e1 tr\u1ecb m\u1ed7i ph\u1ea7n t\u1eed trong kernel v\u1edbi gi\u00e1 tr\u1ecb ph\u1ea7n t\u1eed t\u1ea1i v\u1ecb tr\u00ed t\u01b0\u01a1ng \u1ee9ng c\u1ee7a m\u1ea3ng \u0111\u1ea7u v\u00e0o, r\u1ed3i l\u1ea5y t\u1ed5ng c\u00e1c gi\u00e1 tr\u1ecb n\u00e0y [3]. Trong ph\u00e9p t\u00edch ch\u1eadp, ta c\u1ea7n xoay kernel 180 \u0111\u1ed9 tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n qu\u00e1 tr\u00ecnh tr\u00ean. B\u1ea1n \u0111\u1ecdc c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u k\u0129 h\u01a1n v\u1ec1 kh\u00e1i ni\u1ec7m n\u00e0y qua b\u00e0i vi\u1ebft M\u1ea1ng n\u01a1-ron t\u00edch ch\u1eadp - Convolutional Neural Network (CNN/ConvNet), ph\u1ea7n 2.1 vi\u1ebft v\u1ec1 L\u1edbp t\u00edch ch\u1eadp (Convolutional layer).</p> <p>\u1ede nh\u1eefng ph\u1ea7n ti\u1ebfp theo c\u00f3 s\u1eed d\u1ee5ng ph\u00e9p t\u00edch ch\u1eadp, ta m\u1eb7c \u0111\u1ecbnh r\u1eb1ng c\u00e1c kernel s\u1eed d\u1ee5ng \u0111\u00e3 \u0111\u01b0\u1ee3c xoay 180 \u0111\u1ed9.</p>"},{"location":"blog/edge-detection/#14-canh-va-cac-nguyen-nhan-tao-thanh-canh","title":"1.4. C\u1ea1nh v\u00e0 c\u00e1c nguy\u00ean nh\u00e2n t\u1ea1o th\u00e0nh c\u1ea1nh","text":"<p>C\u1ea1nh \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 s\u1ef1 thay \u0111\u1ed5i c\u01b0\u1eddng \u0111\u1ed9 \u1ea3nh m\u1ed9t c\u00e1ch \u0111\u1ed9t ng\u1ed9t v\u00e0 \u0111\u00e1ng k\u1ec3.</p> <p> </p> <p>H\u00ecnh 4: H\u00ecnh a: \u1ea2nh c\u1ee7a \u0111\u1ea7u m\u1ed9t thanh truy\u1ec1n. H\u00ecnh b: \u0110\u1ed3 th\u1ecb bi\u1ec3u di\u1ec5n m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a m\u1ed7i pixel trong d\u00e3y pixel n\u1eb1m tr\u00ean \u0111\u01b0\u1eddng m\u00e0u \u0111\u1ecf. \u1ea2nh tham kh\u1ea3o t\u1eeb [1].   </p> <p>D\u1ef1a v\u00e0o \u0111\u1ed3 th\u1ecb, ta th\u1ea5y r\u1eb1ng m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a pixel trong nh\u1eefng \u00f4 m\u00e0u xanh lam c\u00f3 s\u1ef1 thay \u0111\u1ed5i \u0111\u1ed9t ng\u1ed9t nh\u01b0ng kh\u00f4ng \u0111\u00e1ng k\u1ec3. Ch\u1ec9 c\u00f3 m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a c\u00e1c pixel trong c\u00e1c \u00f4 m\u00e0u xanh l\u1ee5c l\u00e0 thay \u0111\u1ed5i v\u1eeba \u0111\u00e1ng k\u1ec3, v\u1eeba \u0111\u1ed9t ng\u1ed9t. Do v\u1eady, ch\u1ec9 c\u00f3 nh\u1eefng s\u1ef1 thay \u0111\u1ed5i trong c\u00e1c \u00f4 m\u00e0u xanh l\u1ee5c m\u1edbi \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh (l\u01b0u \u00fd r\u1eb1ng trong \u0111\u1ed3 th\u1ecb c\u00f3 nhi\u1ec1u ch\u1ed7 bi\u1ec5u di\u1ec5n c\u1ea1nh, m\u00ecnh ch\u1ec9 l\u1ea5y v\u00ed d\u1ee5 \u1edf hai ch\u1ed7), c\u00f2n s\u1ef1 thay \u0111\u1ed5i \u1edf nh\u1eefng \u00f4 m\u00e0u xanh lam ch\u1ec9 l\u00e0 nhi\u1ec5u (noise).</p> <p>V\u1edbi \u0111\u1ecbnh ngh\u0129a n\u00e0y, ta th\u1ea5y r\u1eb1ng c\u1ea1nh t\u1ea1o ra d\u1ef1a tr\u00ean s\u1ef1 thay \u0111\u1ed5i c\u1ee7a c\u01b0\u1eddng \u0111\u1ed9 \u1ea3nh kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u1ea1nh th\u1ef1c t\u1ebf c\u1ee7a v\u1eadt th\u1ec3. V\u1eady th\u00ec c\u00e1c c\u1ea1nh n\u00e0y th\u01b0\u1eddng \u0111\u01b0\u1ee3c t\u1ea1o th\u00e0nh do \u0111\u00e2u?</p> <p>B\u1ed1n nguy\u00ean nh\u00e2n ph\u1ed5 bi\u1ebfn t\u1ea1o n\u00ean c\u1ea1nh l\u00e0:</p> <ul> <li>S\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u0111\u1ed9 s\u00e2u (Depth discontinuity): Gi\u1eefa hai v\u1eadt th\u1ec3 (m\u1ed9t \u1edf tr\u01b0\u1edbc v\u00e0 m\u1ed9t \u1edf sau) ho\u1eb7c gi\u1eefa v\u1eadt th\u1ec3 v\u00e0 n\u1ec1n kh\u1ea3 n\u0103ng cao s\u1ebd c\u00f3 m\u1ed9t s\u1ef1 \u0111\u1ee9t \u0111o\u1ea1n, s\u1ef1 \u0111\u1ee9t \u0111o\u1ea1n \u0111\u00f3 h\u00ecnh th\u00e0nh m\u1ed9t c\u1ea1nh.</li> <li>S\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u0111\u1ecbnh h\u01b0\u1edbng b\u1ec1 m\u1eb7t (Surface normal discontinuity): Tuy n\u1eb1m tr\u00ean c\u00f9ng m\u1ed9t v\u1eadt th\u1ec3 v\u00e0 c\u00f3 c\u00f9ng m\u1ed9t ch\u1ea5t li\u1ec7u nh\u01b0ng s\u1ef1 \u0111\u1ecbnh h\u01b0\u1edbng kh\u00e1c nhau c\u1ee7a c\u00e1c b\u1ec1 m\u1eb7t d\u1eabn \u0111\u1ebfn \u00e1nh s\u00e1ng m\u1ed7i b\u1ec1 m\u1eb7t nh\u1eadn \u0111\u01b0\u1ee3c t\u1eeb ngu\u1ed3n s\u00e1ng kh\u00e1c nhau n\u00ean gi\u1eefa c\u00e1c b\u1ec1 m\u1eb7t \u1ea5y h\u00ecnh th\u00e0nh c\u1ea1nh.</li> <li>S\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u0111\u1ed9 ph\u1ea3n x\u1ea1 c\u1ee7a b\u1ec1 m\u1eb7t (Surface reflectance discontinuity): N\u1ebfu m\u1ed9t v\u1eadt th\u1ec3 \u0111\u01b0\u1ee3c l\u00e0m t\u1eeb nhi\u1ec1u ch\u1ea5t li\u1ec7u kh\u00e1c nhau th\u00ec kh\u1ea3 n\u0103ng cao l\u00e0 \u1edf nh\u1eefng ch\u1ed7 giao nhau gi\u1eefa c\u00e1c ch\u1ea5t li\u1ec7u \u1ea5y s\u1ebd h\u00ecnh th\u00e0nh c\u1ea1nh do s\u1ef1 ph\u1ea3n x\u1ea1 \u00e1nh s\u00e1ng c\u1ee7a m\u1ed7i ch\u1ea5t li\u1ec7u l\u00e0 kh\u00e1c nhau.</li> <li>S\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u00e1nh s\u00e1ng (Illumination discontinuity): Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, v\u1eadt th\u1ec3 s\u1ebd ng\u0103n m\u1ed9t l\u01b0\u1ee3ng \u00e1nh s\u00e1ng nh\u1ea5t \u0111\u1ecbnh, t\u1ea1o th\u00e0nh b\u00f3ng. S\u1ef1 thay \u0111\u1ed5i \u0111\u1ed9t ng\u1ed9t v\u1ec1 m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a pixel gi\u1eefa v\u00f9ng b\u1ecb h\u1eaft b\u00f3ng v\u00e0 v\u00f9ng kh\u00f4ng b\u1ecb h\u1eaft b\u00f3ng d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u1ea1o th\u00e0nh c\u1ea1nh gi\u1eefa hai v\u00f9ng n\u00e0y.</li> </ul> <p>H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y gi\u00fap b\u1ea1n \u0111\u1ecdc h\u00ecnh dung r\u00f5 h\u01a1n v\u1ec1 c\u00e1c nguy\u00ean nh\u00e2n n\u00e0y:</p> <p> </p> <p>H\u00ecnh 5: C\u00e1c nguy\u00ean nh\u00e2n t\u1ea1o th\u00e0nh c\u1ea1nh (c\u00e1c \u0111\u01b0\u1eddng m\u00e0u xanh lam l\u00e0 nh\u1eefng c\u1ea1nh t\u1ea1o th\u00e0nh do s\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u0111\u1ecbnh h\u01b0\u1edbng b\u1ec1 m\u1eb7t, c\u00e1c \u0111\u01b0\u1eddng m\u00e0u v\u00e0ng l\u00e0 nh\u1eefng c\u1ea1nh t\u1ea1o th\u00e0nh do s\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u0111\u1ed9 ph\u1ea3n x\u1ea1 c\u1ee7a b\u1ec1 m\u1eb7t, c\u00e1c \u0111\u01b0\u1eddng m\u00e0u xanh l\u1ee5c l\u00e0 nh\u1eefng c\u1ea1nh t\u1ea1o th\u00e0nh do s\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u00e1nh s\u00e1ng, c\u00e1c \u0111\u01b0\u1eddng m\u00e0u \u0111\u1ecf l\u00e0 nh\u1eefng c\u1ea1nh t\u1ea1o th\u00e0nh do s\u1ef1 kh\u00f4ng li\u00ean t\u1ee5c v\u1ec1 \u0111\u1ed9 s\u00e2u). \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.   </p>"},{"location":"blog/edge-detection/#15-cac-khai-niem-khac","title":"1.5. C\u00e1c kh\u00e1i ni\u1ec7m kh\u00e1c:","text":"<p>Ngo\u00e0i nh\u1eefng kh\u00e1i ni\u1ec7m tr\u00ean th\u00ec c\u00f3 m\u1ed9t v\u00e0i kh\u00e1i ni\u1ec7m m\u00e0 m\u00ecnh cho r\u1eb1ng s\u1ebd c\u1ea7n thi\u1ebft cho b\u1ea1n \u0111\u1ecdc \u1edf nh\u1eefng ph\u1ea7n sau:</p> <ul> <li>\u0110i\u1ec3m c\u1ea1nh (edge point): l\u00e0 m\u1ed9t \u0111i\u1ec3m trong \u1ea3nh c\u00f3 t\u1ecda \u0111\u1ed9 \\([i,j]\\) m\u00e0 \u1edf \u0111\u00f3 x\u1ea3y ra s\u1ef1 thay \u0111\u1ed5i \u0111\u1ed9t ng\u1ed9t v\u00e0 \u0111\u00e1ng k\u1ec3 v\u1ec1 c\u01b0\u1eddng \u0111\u1ed9 \u1ea3nh.</li> <li>\u0110\u01b0\u1eddng bi\u00ean (contour): M\u1ed9t t\u1eadp c\u00e1c \u0111i\u1ec3m c\u1ea1nh \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp th\u1ee9 t\u1ef1 ho\u1eb7c m\u1ed9t \u0111\u01b0\u1eddng cong bi\u1ec3u di\u1ec5n t\u1eadp c\u00e1c \u0111i\u1ec3m c\u1ea1nh \u1ea5y.</li> <li>T\u1eadp c\u00e1c \u0111i\u1ec3m c\u1ea1nh \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n c\u00f3 th\u1ec3 chia l\u00e0m hai: t\u1eadp c\u00e1c c\u1ea1nh \u0111\u00fang (correct edges) v\u00e0 t\u1eadp c\u00e1c c\u1ea1nh sai (false edges), t\u1eadp c\u00e1c c\u1ea1nh sai n\u00e0y c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 false positives, n\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi nh\u1eefng \u0111i\u1ec3m kh\u00f4ng ph\u1ea3i l\u00e0 c\u1ea1nh trong \u1ea3nh g\u1ed1c. Ngo\u00e0i ra c\u00f2n m\u1ed9t t\u1eadp c\u1ea1nh th\u1ee9 ba, l\u00e0 nh\u1eefng c\u1ea1nh l\u1ebd ra ph\u1ea3i \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh, nh\u01b0ng b\u1ecb b\u1ecf qua b\u1edfi thu\u1eadt to\u00e1n, t\u1eadp n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 false negatives.</li> </ul>"},{"location":"blog/edge-detection/#2-phuong-phap-ao-ham-cap-mot-cho-bai-toan-nhan-dien-canh","title":"2. Ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t cho b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh","text":"<p>\u1ede tr\u00ean ch\u00fang ta \u0111\u00e3 c\u00f3 \u0111\u1ecbnh ngh\u0129a v\u1ec1 c\u1ea1nh, l\u00e0 s\u1ef1 thay \u0111\u1ed5i \u0111\u1ed9t ng\u1ed9t v\u00e0 \u0111\u00e1ng k\u1ec3 v\u1ec1 m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a c\u00e1c pixel trong \u1ea3nh. S\u1ef1 thay \u0111\u1ed5i \u1ea5y nh\u1eafc ta nh\u1edb \u0111\u1ebfn kh\u00e1i ni\u1ec7m g\u00ec trong to\u00e1n h\u1ecdc nh\u1ec9? \u0110\u00fang r\u1ed3i, l\u00e0 \u0111\u1ea1o h\u00e0m! Ch\u00fang ta c\u00f9ng nhau quan s\u00e1t b\u1ee9c h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y:</p> <p> </p> <p>H\u00ecnh 6: H\u00ecnh 1: D\u00e3y c\u00e1c pixel \u0111\u01b0\u1ee3c x\u00e9t. H\u00ecnh 2: \u0110\u1ed3 th\u1ecb bi\u1ec3u di\u1ec5n m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a m\u1ed7i pixel trong d\u00e3y. H\u00ecnh 3: \u0110\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a h\u00e0m s\u1ed1 bi\u1ec3u di\u1ec5n b\u1edfi \u0111\u1ed3 th\u1ecb th\u1ee9 nh\u1ea5t. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.   </p> <p>Trong b\u1ee9c \u1ea3nh tr\u00ean, ta kh\u00f4ng x\u00e9t to\u00e0n b\u1ed9 \u1ea3nh m\u00e0 ch\u1ec9 x\u00e9t d\u00e3y c\u00e1c pixel n\u1eb1m tr\u00ean \u0111\u01b0\u1eddng k\u1ebb m\u00e0u \u0111\u1ecf (xem b\u1ee9c \u1ea3nh c\u00f3 1 chi\u1ec1u). \u1ede \u0111\u1ed3 th\u1ecb th\u1ee9 nh\u1ea5t, ta nh\u1eadn th\u1ea5y c\u00f3 hai ch\u1ed7 m\u1ee9c \u0111\u1ed9 x\u00e1m thay \u0111\u1ed5i \u0111\u1ed9t ng\u1ed9t, t\u01b0\u01a1ng \u1ee9ng v\u1edbi hai l\u1ea7n c\u00e1c pixel tr\u00ean \u0111\u01b0\u1eddng k\u1ebb m\u00e0u \u0111\u1ecf chuy\u1ec3n m\u00e0u t\u1eeb tr\u1eafng sang \u0111en v\u00e0 t\u1eeb \u0111en sang tr\u1eafng, \u0111\u00f3 c\u0169ng ch\u00ednh l\u00e0 v\u1ecb tr\u00ed c\u1ee7a hai c\u1ea1nh. \u0110\u1ed3 th\u1ecb th\u1ee9 hai bi\u1ec3u di\u1ec5n \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a h\u00e0m s\u1ed1 bi\u1ec3u di\u1ec5n b\u1edfi \u0111\u1ed3 th\u1ecb th\u1ee9 nh\u1ea5t. \u0110\u1ebfn \u0111\u00e2y n\u1ebfu nh\u01b0 b\u1ea1n th\u1eafc m\u1eafc r\u1eb1ng: nh\u1eefng gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c pixel l\u00e0 r\u1eddi r\u1ea1c, th\u1ebf th\u00ec v\u00ec sao l\u1ea1i c\u00f3 \u0111\u1ea1o h\u00e0m? \u1ede \u0111\u00e2y, ch\u00fang ta xem nh\u01b0 gi\u00e1 tr\u1ecb c\u1ee7a d\u00e3y c\u00e1c pixel n\u1eb1m tr\u00ean \u0111\u01b0\u1eddng m\u00e0u \u0111\u1ecf \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 b\u1edfi m\u1ed9t h\u00e0m s\u1ed1, v\u00e0 b\u1edfi v\u00ec h\u00e0m s\u1ed1 n\u00e0y li\u00ean t\u1ee5c n\u00ean n\u00f3 c\u00f3 \u0111\u1ea1o h\u00e0m. Tr\u00ean th\u1ef1c t\u1ebf, ta kh\u00f4ng c\u1ea7n ph\u1ea3i m\u00f4 h\u00ecnh h\u00f3a gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c pixel b\u1edfi m\u1ed9t h\u00e0m s\u1ed1 m\u00e0 c\u00f3 th\u1ec3 x\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m c\u1ee7a ch\u00fang m\u1ed9t c\u00e1ch r\u1eddi r\u1ea1c. B\u1ea1n \u0111\u1ecdc s\u1ebd \u0111\u01b0\u1ee3c t\u00ecm hi\u1ec3u k\u0129 h\u01a1n v\u1ec1 c\u00e1ch x\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m \u1edf ph\u1ea7n d\u01b0\u1edbi.</p> <p>Trong kh\u00f4ng gian 2 chi\u1ec1u th\u00ec gradient t\u1ea1i m\u1ed9t \u0111i\u1ec3m l\u00e0 m\u1ed9t vector</p> \\[ \\boldsymbol{G}[f(x,y)] = \\begin{bmatrix} G_x \\\\ G_y \\end{bmatrix} = \\begin{bmatrix} \\frac{\\partial f}{\\partial x} \\\\ \\frac{\\partial f}{\\partial y} \\end{bmatrix} \\] <p>Trong \u0111\u00f3 \\(f(x,y)\\) l\u00e0 h\u00e0m s\u1ed1 bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb c\u1ee7a pixel t\u1ea1i v\u1ecb tr\u00ed \\((x,y)\\)</p> <ol> <li> <p>Hai t\u00ednh ch\u1ea5t quan tr\u1ecdng li\u00ean quan \u0111\u1ebfn gradient t\u1ea1i m\u1ed9t \u0111i\u1ec3m: H\u01b0\u1edbng c\u1ee7a gradient (gradient direction) l\u00e0 h\u01b0\u1edbng m\u00e0 m\u1ee9c \u0111\u1ed9 x\u00e1m pixel t\u0103ng nhanh nh\u1ea5t, \u0111\u01b0\u1ee3c cho b\u1edfi c\u00f4ng th\u1ee9c</p> \\[ \\alpha(x,y) = \\tan^{-1}\\left( \\frac{G_y}{G_x}\\right)  \\] </li> <li> <p>\u0110\u1ed9 l\u1edbn c\u1ee7a gradient (gradient magnitude), \u0111\u01b0\u1ee3c cho b\u1edfi c\u00f4ng th\u1ee9c</p> \\[ G[f(x,y)] = \\sqrt{G_x^2 + G_y^2}  \\] <p>\u0110\u1ed9 l\u1edbn n\u00e0y \u0111\u01b0\u1ee3c t\u00ednh theo chu\u1ea9n 2 (norm 2). Tr\u00ean th\u1ef1c t\u1ebf, \u0111\u1ec3 d\u1ec5 t\u00ednh to\u00e1n th\u00ec ng\u01b0\u1eddi ta th\u01b0\u1eddng \u01b0\u1edbc l\u01b0\u1ee3ng \u0111\u1ed9 l\u1edbn d\u1ef1a theo chu\u1ea9n 1</p> \\[ G[f(x,y)] = |G_x| + |G_y| \\] <p>ho\u1eb7c chu\u1ea9n v\u00f4 c\u00f9ng</p> \\[ G[f(x,y)] = \\max\\{|G_x|, |G_y|\\} \\] </li> </ol>"},{"location":"blog/edge-detection/#21-xap-xi-ao-ham","title":"2.1. X\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m","text":"<p>Trong \u1ea3nh s\u1ed1, do gi\u00e1 tr\u1ecb pixel l\u00e0 r\u1eddi r\u1ea1c n\u00ean \u0111\u1ea1o h\u00e0m th\u01b0\u1eddng \u0111\u01b0\u1ee3c t\u00ednh b\u1edfi s\u1ef1 sai kh\u00e1c gi\u1eefa gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c pixel g\u1ea7n nhau. M\u1ed9t c\u00e1ch t\u1ef1 nhi\u00ean ta ngh\u0129 \u0111\u1ebfn vi\u1ec7c x\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m nh\u01b0 sau (nh\u1edb r\u1eb1ng h\u01b0\u1edbng t\u0103ng c\u1ee7a \\(j\\) t\u01b0\u01a1ng \u1ee9ng v\u1edbi h\u01b0\u1edbng \\(Ox\\) v\u00e0 h\u01b0\u1edbng t\u0103ng c\u1ee7a \\(i\\) t\u01b0\u01a1ng \u1ee9ng v\u1edbi h\u01b0\u1edbng \\(-Oy\\)):</p> \\[ G_x \\approx f[i,j+1] - f[i,j] \\] \\[ G_y \\approx f[i,j] - f[i+1, j] \\] <p>C\u00e1ch x\u1ea5p x\u1ec9 n\u00e0y \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n b\u1edfi 2 kernel t\u00edch ch\u1eadp sau</p> \\[ s_x = \\begin{bmatrix} -1 &amp; 1\\end{bmatrix} \\qquad \\qquad s_y = \\begin{bmatrix} 1 \\\\ -1\\end{bmatrix} \\] <p>Tuy nhi\u00ean m\u1ed9t h\u1ea1n ch\u1ebf c\u1ee7a c\u00e1ch l\u00e0m n\u00e0y \u0111\u00f3 l\u00e0 vi\u1ec7c \u00e1p d\u1ee5ng c\u00f4ng th\u1ee9c tr\u00ean cho ta \u0111\u1ea1o h\u00e0m theo ph\u01b0\u01a1ng \\(Ox\\) t\u1ea1i \u0111i\u1ec3m \\([i, j+\\frac{1}{2}]\\) v\u00e0 \u0111\u1ea1o h\u00e0m theo ph\u01b0\u01a1ng \\(Oy\\) t\u1ea1i \u0111i\u1ec3m \\([i+\\frac{1}{2}, j]\\). \u0110\u1ec3 kh\u1eafc ph\u1ee5c t\u00ecnh tr\u1ea1ng n\u00e0y, ng\u01b0\u1eddi ta th\u01b0\u1eddng s\u1eed d\u1ee5ng kernel \\(2 \\times 2\\) thay v\u00ec kernel \\(2 \\times 1\\) hay \\(1 \\times 2\\) nh\u01b0 tr\u00ean:</p> \\[ s_x = \\begin{bmatrix} -1 &amp; 1 \\\\ -1 &amp; 1\\end{bmatrix} \\qquad \\qquad s_y = \\begin{bmatrix} 1 &amp; 1 \\\\ -1 &amp; -1\\end{bmatrix} \\] <p>Vi\u1ec7c \u00e1p d\u1ee5ng 2 kernel tr\u00ean s\u1ebd gi\u00fap ta x\u1ea5p x\u1ec9 \u0111\u01b0\u1ee3c \u0111\u1ea1o h\u00e0m t\u1ea1i \u0111i\u1ec3m \\([i+\\frac{1}{2}, j + \\frac{1}{2}]\\), nh\u01b0ng c\u00e1ch l\u00e0m n\u00e0y v\u1eabn c\u00f3 h\u1ea1n ch\u1ebf: v\u00ec \u0111i\u1ec3m \u0111\u01b0\u1ee3c t\u00ednh \u0111\u1ea1o h\u00e0m n\u1eb1m \u1edf gi\u1eefa c\u00e1c pixel ch\u1ee9 kh\u00f4ng thu\u1ed9c m\u1ed9t pixel n\u00e0o c\u1ea3 (\u0111i\u1ec3m n\u00e0y c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 interpolation point, hay \u0111i\u1ec3m n\u1ed9i suy). M\u1ed9t h\u01b0\u1edbng ti\u1ebfp c\u1eadn m\u1edbi \u0111\u01b0\u1ee3c \u0111\u01b0a ra: d\u00f9ng kernel \\(3 \\times 3\\) (hay c\u00e1c kernel c\u00f3 s\u1ed1 pixel \u1edf m\u1ed7i chi\u1ec1u l\u00e0 m\u1ed9t s\u1ed1 l\u1ebb) \u0111\u1ec3 x\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m t\u1ea1i pixel trung t\u00e2m, \u0111a ph\u1ea7n c\u00e1c kernel (hay to\u00e1n t\u1eed) ph\u1ed5 bi\u1ebfn ng\u00e0y nay \u0111\u1ec1u s\u1eed d\u1ee5ng h\u01b0\u1edbng ti\u1ebfp c\u1eadn n\u00e0y.</p>"},{"location":"blog/edge-detection/#22-mot-so-toan-tu-pho-bien-su-dung-ao-ham-cap-mot","title":"2.2. M\u1ed9t s\u1ed1 to\u00e1n t\u1eed ph\u1ed5 bi\u1ebfn s\u1eed d\u1ee5ng \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t","text":"<ul> <li> <p>To\u00e1n t\u1eed Robert</p> <p>To\u00e1n t\u1eed Robert cho ta m\u1ed9t c\u00f4ng th\u1ee9c kh\u00e1 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 x\u1ea5p x\u1ec9 gradient t\u1ea1i m\u1ed9t \u0111i\u1ec3m theo ph\u01b0\u01a1ng \\(Ox\\) v\u00e0 \\(Oy\\):</p> \\[ G_x = f[i,j] - f[i+1,j+1] \\] \\[ G_y = f[i+1,j] - f[i,j+1] \\] <p>Hai gi\u00e1 tr\u1ecb \\(G_x\\), \\(G_y\\) n\u00e0y \u0111\u01b0\u1ee3c t\u00ednh b\u1edfi 2 kernel \\(2 \\times 2\\) sau</p> \\[ s_x = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; -1\\end{bmatrix} \\qquad \\qquad s_y = \\begin{bmatrix} 0 &amp; -1 \\\\ 1 &amp; 0\\end{bmatrix} \\] <p>C\u00f4ng th\u1ee9c t\u00ednh \u0111\u1ea1o h\u00e0m c\u1ee7a to\u00e1n t\u1eed Robert kh\u00e1 \u0111\u01a1n gi\u1ea3n, \u0111\u1ed3ng th\u1eddi gi\u00e1 tr\u1ecb t\u00ednh \u0111\u01b0\u1ee3c thu\u1ed9c v\u1ec1 m\u1ed9t \u0111i\u1ec3m n\u1ed9i suy n\u1eb1m gi\u1eefa c\u00e1c pixel n\u00ean to\u00e1n t\u1eed Robert hi\u1ebfm khi \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong th\u1ef1c ti\u1ec5n.</p> </li> <li> <p>To\u00e1n t\u1eed Sobel</p> <p>\u0110\u1ed1i v\u1edbi to\u00e1n t\u1eed Sobel, \\(G_x\\), \\(G_y\\) \u0111\u01b0\u1ee3c t\u00ednh b\u1edfi 2 kernel \\(3 \\times 3\\) sau</p> \\[ s_x = \\begin{bmatrix} -1 &amp; 0 &amp; 1 \\\\ -2 &amp; 0 &amp; 2 \\\\ -1 &amp; 0 &amp; 1\\\\ \\end{bmatrix} \\qquad \\qquad s_y = \\begin{bmatrix} 1 &amp; 2 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 \\\\ -1 &amp; -2 &amp; -1\\\\ \\end{bmatrix} \\] <p>Ta c\u00f3 nh\u1eadn x\u00e9t r\u1eb1ng to\u00e1n t\u1eed Sobel x\u1ea5p x\u1ec9 \u0111\u01b0\u1ee3c \u0111\u1ea1o h\u00e0m t\u1ea1i \u0111i\u1ec3m n\u1eb1m trong pixel trung t\u00e2m nh\u01b0 \u0111\u00e3 n\u00f3i \u1edf tr\u00ean, \u0111\u1ed3ng th\u1eddi to\u00e1n t\u1eed n\u00e0y \u0111\u1eb7t tr\u1ecdng s\u1ed1 cao cho nh\u1eefng pixel n\u1eb1m g\u1ea7n trung t\u00e2m h\u01a1n n\u00ean n\u00f3 c\u00f2n c\u00f3 t\u00e1c d\u1ee5ng kh\u1eed nhi\u1ec5u. V\u00ec v\u1eady to\u00e1n t\u1eed Sobel l\u00e0 m\u1ed9t trong nh\u1eefng to\u00e1n t\u1eed d\u00f9ng \u0111\u1ec3 t\u00ednh gradient \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn nh\u1ea5t.</p> <p>K\u1ebft qu\u1ea3 \u00e1p d\u1ee5ng to\u00e1n t\u1eed Sobel:</p> <p>      H\u00ecnh 7: \u1ea2nh g\u1ed1c \u0111\u00e3 \u0111\u01b0\u1ee3c chuy\u1ec3n sang d\u1ea1ng grayscale.      </p> <p>      H\u00ecnh 8: H\u00ecnh 1, 2: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c sau khi \u00e1p d\u1ee5ng 2 kernel \\(s_x\\), \\(s_y\\) l\u00ean \u1ea3nh g\u1ed1c. H\u00ecnh 3: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c sau khi t\u00ednh \u0111\u1ed9 l\u1edbn gradient t\u1ea1i m\u1ed7i pixel trong \u1ea3nh. H\u00ecnh 4: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c sau khi ph\u00e2n ng\u01b0\u1ee1ng h\u00ecnh 3 v\u1edbi ng\u01b0\u1ee1ng T = 100.      </p> <p>L\u01b0u \u00fd r\u1eb1ng khi d\u00f9ng kernel \u0111\u1ec3 t\u00ednh \u0111\u1ea1o h\u00e0m t\u1ea1i m\u1ed7i pixel, gi\u00e1 tr\u1ecb thu \u0111\u01b0\u1ee3c c\u00f3 th\u1ec3 l\u00e0 \u00e2m ho\u1eb7c d\u01b0\u01a1ng, \u0111\u1ec3 c\u00f3 th\u1ec3 bi\u1ec3u di\u1ec5n k\u1ebft qu\u1ea3 n\u00e0y d\u01b0\u1edbi d\u1ea1ng \u1ea3nh grayscale (\u1ea3nh m\u00e0 gi\u00e1 tr\u1ecb c\u00e1c pixel n\u1eb1m trong kho\u1ea3ng t\u1eeb 0 \u0111\u1ebfn 255), ta d\u00f9ng m\u1ed9t ph\u00e9p \u00e1nh x\u1ea1 chuy\u1ec3n gi\u00e1 tr\u1ecb nh\u1ecf nh\u1ea5t (l\u00fac n\u00e0y l\u00e0 m\u1ed9t s\u1ed1 \u00e2m) th\u00e0nh 0 v\u00e0 gi\u00e1 tr\u1ecb l\u1edbn nh\u1ea5t th\u00e0nh 255. V\u00ec v\u1eady ta quan s\u00e1t th\u1ea5y b\u1ee9c \u1ea3nh thu \u0111\u01b0\u1ee3c \u0111a ph\u1ea7n c\u00f3 m\u00e0u x\u00e1m v\u00ec \u0111a s\u1ed1 gi\u00e1 tr\u1ecb \u0111\u1ea1o h\u00e0m n\u1eb1m \u1edf kho\u1ea3ng gi\u1eefa hai gi\u00e1 tr\u1ecb n\u00e0y, nh\u1eefng \u0111\u01b0\u1eddng m\u00e0u \u0111en l\u00e0 nh\u1eefng v\u1ecb tr\u00ed m\u00e0 t\u1ea1i \u0111\u00f3 gi\u00e1 tr\u1ecb \u0111\u1ea1o h\u00e0m \u0111\u1ea1t c\u1ef1c ti\u1ec3u, nh\u1eefng \u0111\u01b0\u1eddng m\u00e0u tr\u1eafng l\u00e0 nh\u1eefng v\u1ecb tr\u00ed m\u00e0 t\u1ea1i \u0111\u00f3 gi\u00e1 tr\u1ecb \u0111\u1ea1o h\u00e0m \u0111\u1ea1t c\u1ef1c \u0111\u1ea1i.</p> <p>B\u1ee9c \u1ea3nh th\u1ee9 ba bi\u1ec3u di\u1ec5n \u0111\u1ed9 l\u1edbn gradient t\u1ea1i m\u1ed7i pixel, thu \u0111\u01b0\u1ee3c b\u1eb1ng c\u00e1ch l\u1ea5y c\u0103n c\u1ee7a t\u1ed5ng b\u00ecnh ph\u01b0\u01a1ng gi\u00e1 tr\u1ecb pixel t\u01b0\u01a1ng \u1ee9ng \u1edf hai b\u1ee9c h\u00ecnh tr\u00ean (l\u00fac ch\u01b0a scale). B\u1ee9c \u1ea3nh cu\u1ed1i c\u00f9ng l\u00e0 k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c sau khi ph\u00e2n ng\u01b0\u1ee1ng b\u1ee9c \u1ea3nh th\u1ee9 ba, c\u00e1c pixel \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh c\u00f3 m\u00e0u tr\u1eafng, ng\u01b0\u1ee3c l\u1ea1i c\u00f3 m\u00e0u \u0111en (vi\u1ec7c ph\u00e2n ng\u01b0\u1ee1ng n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i r\u00f5 h\u01a1n \u1edf m\u1ee5c 3).</p> <li> <p>To\u00e1n t\u1eed Prewitt</p> <p>To\u00e1n t\u1eed Prewitt gi\u1ed1ng v\u1edbi to\u00e1n t\u1eed Sobel, ngo\u1ea1i tr\u1eeb vi\u1ec7c to\u00e1n t\u1eed n\u00e0y kh\u00f4ng \u0111\u1eb7t tr\u1ecdng s\u1ed1 cao cho nh\u1eefng pixel n\u1eb1m g\u1ea7n trung t\u00e2m, t\u1ee9c xem nh\u1eefng pixel xung quanh c\u00f3 vai tr\u00f2 ngang b\u1eb1ng nhau trong vi\u1ec7c quy\u1ebft \u0111\u1ecbnh \u0111\u1ea1o h\u00e0m t\u1ea1i \u0111i\u1ec3m n\u1eb1m trong pixel trung t\u00e2m. 2 kernel \\(s_x\\) v\u00e0 \\(s_y\\) c\u1ee7a to\u00e1n t\u1eed n\u00e0y c\u00f3 d\u1ea1ng nh\u01b0 sau</p> \\[ s_x = \\begin{bmatrix} -1 &amp; 0 &amp; 1 \\\\ -1 &amp; 0 &amp; 1 \\\\ -1 &amp; 0 &amp; 1\\\\ \\end{bmatrix} \\qquad \\qquad s_y = \\begin{bmatrix} 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 \\\\ -1 &amp; -1 &amp; -1\\\\ \\end{bmatrix} \\] </li>"},{"location":"blog/edge-detection/#23-anh-huong-cua-o-lon-kernel-en-kha-nang-nhan-dien-canh","title":"2.3. \u1ea2nh h\u01b0\u1edfng c\u1ee7a \u0111\u1ed9 l\u1edbn kernel \u0111\u1ebfn kh\u1ea3 n\u0103ng nh\u1eadn di\u1ec7n c\u1ea1nh","text":"<p>M\u1ed9t kernel c\u00f3 k\u00edch th\u01b0\u1edbc nh\u1ecf s\u1ebd x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c v\u1ecb tr\u00ed c\u1ee7a c\u1ea1nh v\u1edbi \u0111\u1ed9 ch\u00ednh x\u00e1c cao (good localization) nh\u01b0ng k\u1ebft qu\u1ea3 t\u00ednh to\u00e1n \u0111\u01b0\u1ee3c l\u1ea1i r\u1ea5t d\u1ec5 b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nhi\u1ec5u (noise sensitive): ta ch\u1ec9 s\u1eed d\u1ee5ng 4 hay 9 gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c pixel l\u00e2n c\u1eadn \u0111\u1ec3 x\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m, n\u1ebfu nh\u01b0 m\u1ed9t trong nh\u1eefng pixel n\u00e0y ch\u1ee9a nhi\u1ec5u th\u00ec k\u1ebft qu\u1ea3 b\u1ecb \u1ea3nh h\u01b0\u1edfng r\u1ea5t nhi\u1ec1u. M\u1ed9t kernel l\u1edbn s\u1ebd gi\u1ea3m \u0111\u01b0\u1ee3c \u1ea3nh h\u01b0\u1edfng c\u1ee7a nhi\u1ec5u, nh\u01b0ng \u0111\u1ed9 ch\u00ednh x\u00e1c khi x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed c\u1ee7a c\u1ea1nh l\u1ea1i kh\u00f4ng cao (poor localization): gi\u00e1 tr\u1ecb \u0111\u1ea1o h\u00e0m x\u1ea5p x\u1ec9 cho m\u1ed9t pixel b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nh\u1eefng th\u00f4ng tin \u1edf xa.</p>"},{"location":"blog/edge-detection/#3-cac-buoc-cua-mot-thuat-toan-nhan-dien-canh","title":"3. C\u00e1c b\u01b0\u1edbc c\u1ee7a m\u1ed9t thu\u1eadt to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh","text":"<p>B\u01b0\u1edbc 1: Filtering (l\u1ecdc nhi\u1ec5u)</p> <p>Vi\u1ec7c t\u00ednh to\u00e1n \u0111\u1ea1o h\u00e0m \u0111\u1ed1i v\u1edbi c\u00e1c kernel nh\u1ecf (\\(2 \\times 2\\), \\(3 \\times 3\\)) r\u1ea5t d\u1ec5 b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nhi\u1ec5u b\u1edfi n\u00f3 ch\u1ec9 d\u1ef1a tr\u00ean m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a 2 hay 3 pixel n\u1eb1m k\u1ec1 nhau (m\u00ecnh s\u1ebd n\u00f3i r\u00f5 h\u01a1n \u1edf ph\u1ea7n d\u01b0\u1edbi), ch\u00ednh v\u00ec v\u1eady tr\u01b0\u1edbc khi \u0111i v\u00e0o thu\u1eadt to\u00e1n ch\u00ednh th\u00ec l\u1ecdc nhi\u1ec5u l\u00e0 m\u1ed9t b\u01b0\u1edbc kh\u00f4ng th\u1ec3 thi\u1ebfu. Tuy nhi\u00ean c\u1ea7n l\u01b0u \u00fd v\u1ec1 m\u1ed1i t\u01b0\u01a1ng quan gi\u1eefa m\u1ee9c \u0111\u1ed9 l\u1ecdc nhi\u1ec5u v\u00e0 \u0111\u1ed9 s\u1eafc c\u1ee7a c\u1ea1nh: c\u00e0ng l\u1ecdc \u0111\u01b0\u1ee3c nhi\u1ec1u nhi\u1ec5u th\u00ec c\u1ea1nh s\u1ebd c\u00e0ng m\u1edd.</p> <p>B\u01b0\u1edbc 2: Enhancement</p> <p>Vi\u1ec7c nh\u1eadn di\u1ec7n c\u1ea1nh kh\u00f4ng d\u1ef1a tr\u00ean gi\u00e1 tr\u1ecb m\u1ed7i pixel m\u1ed9t c\u00e1ch ri\u00eang l\u1ebb m\u00e0 d\u1ef1a tr\u00ean m\u1ed1i t\u01b0\u01a1ng quan c\u1ee7a pixel \u0111ang x\u00e9t v\u1edbi c\u00e1c pixel l\u00e2n c\u1eadn. \u1ede b\u01b0\u1edbc n\u00e0y, ta nh\u1ea5n m\u1ea1nh s\u1ef1 thay \u0111\u1ed5i m\u1ee9c \u0111\u1ed9 x\u00e1m gi\u1eefa c\u00e1c pixel b\u1eb1ng c\u00e1ch bi\u1ec3u di\u1ec5n m\u1ed7i pixel b\u1eb1ng \u0111\u1ed9 l\u1edbn gradient t\u1ea1i \u0111i\u1ec3m \u0111\u00f3.</p> <p>B\u01b0\u1edbc 3: Detection (nh\u1eadn di\u1ec7n c\u1ea1nh)</p> <p>Sau b\u01b0\u1edbc 2, ta thu \u0111\u01b0\u1ee3c m\u1ed9t b\u1ee9c \u1ea3nh v\u1edbi gi\u00e1 tr\u1ecb m\u1ed7i pixel l\u00e0 \u0111\u1ed9 l\u1edbn \u0111\u1ea1o c\u1ee7a gradient t\u1ea1i pixel \u0111\u00f3. \u0110\u00e2y ch\u01b0a ph\u1ea3i l\u00e0 \u0111\u1ea7u ra m\u00e0 ch\u00fang ta mong mu\u1ed1n. Nh\u01b0 \u0111\u00e3 n\u00f3i \u1edf tr\u00ean, nh\u1eefng pixel c\u00f3 \u0111\u1ed9 l\u1edbn gradient l\u1edbn th\u00ec m\u1edbi l\u00e0 c\u1ea1nh, c\u00f2n nh\u1eefng pixel m\u00e0 t\u1ea1i \u0111\u00f3 c\u00f3 s\u1ef1 thay \u0111\u1ed5i \u0111\u1ea1o h\u00e0m nh\u01b0ng kh\u00f4ng \u0111\u00e1ng k\u1ec3 th\u00ec ch\u1ec9 l\u00e0 nhi\u1ec5u. V\u00ec v\u1eady ta c\u00f2n ph\u1ea3i th\u1ef1c hi\u1ec7n th\u00eam m\u1ed9t b\u01b0\u1edbc n\u1eefa, \u0111\u00f3 l\u00e0 ph\u00e2n ng\u01b0\u1ee1ng (thresholding). Sau b\u01b0\u1edbc n\u00e0y, ta s\u1ebd thu \u0111\u01b0\u1ee3c m\u1ed9t b\u1ee9c \u1ea3nh v\u1edbi gi\u00e1 tr\u1ecb m\u1ed7i pixel l\u00e0 m\u1ed9t gi\u00e1 tr\u1ecb nh\u1ecb ph\u00e2n (0 n\u1ebfu pixel kh\u00f4ng ph\u1ea3i l\u00e0 c\u1ea1nh v\u00e0 1 n\u1ebfu pixel l\u00e0 c\u1ea1nh).</p>"},{"location":"blog/edge-detection/#4-phuong-phap-ao-ham-cap-hai-cho-bai-toan-nhan-dien-canh","title":"4. Ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ea1o h\u00e0m c\u1ea5p hai cho b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh","text":"<p>\u1ede ph\u01b0\u01a1ng ph\u00e1p tr\u00ean, ta t\u00ednh \u0111\u1ed9 l\u1edbn gradient t\u1ea1i m\u1ed7i pixel r\u1ed3i d\u00f9ng m\u1ed9t ng\u01b0\u1ee1ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh m\u1ed9t pixel c\u00f3 ph\u1ea3i l\u00e0 m\u1ed9t c\u1ea1nh hay kh\u00f4ng, d\u1eabn \u0111\u1ebfn vi\u1ec7c c\u00f3 qu\u00e1 nhi\u1ec1u pixel \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh. \u0110\u1ec3 kh\u1eafc ph\u1ee5c h\u1ea1n ch\u1ebf n\u00e0y, m\u1ed9t c\u00e1ch ti\u1ebfp c\u1eadn kh\u00e1c l\u00e0 \u0111\u1ed1i v\u1edbi nhi\u1ec1u \u0111i\u1ec3m c\u1ea1nh n\u1eb1m k\u1ec1 nhau, ta ch\u1ec9 nh\u1eadn nh\u1eefng pixel c\u00f3 \u0111\u1ed9 l\u1edbn gradient \u0111\u1ea1t c\u1ef1c \u0111\u1ea1i c\u1ee5c b\u1ed9 (local maxima). Ta c\u0169ng bi\u1ebft r\u1eb1ng, gi\u00e1 tr\u1ecb c\u1ef1c \u0111\u1ea1i c\u1ee7a \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi giao \u0111i\u1ec3m c\u1ee7a \u0111\u1ea1o h\u00e0m c\u1ea5p hai v\u00e0 tr\u1ee5c ho\u00e0nh, \u0111i\u1ec3m n\u00e0y c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 \u0111i\u1ec3m v\u1ec1 kh\u00f4ng (zero crossing).</p> <p>      H\u00ecnh 9: \u0110\u1ed3 th\u1ecb \u0111\u1ea7u ti\u00ean bi\u1ec3u di\u1ec5n gi\u00e1 tr\u1ecb m\u1ee9c \u0111\u1ed9 x\u00e1m c\u1ee7a m\u1ed7i pixel trong kh\u00f4ng gian 1 chi\u1ec1u (xem gi\u00e1 tr\u1ecb n\u00e0y l\u00e0 m\u1ed9t h\u00e0m li\u00ean t\u1ee5c), \u0111\u1ed3 th\u1ecb th\u1ee9 hai l\u00e0 \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a gi\u00e1 tr\u1ecb n\u00e0y, \u0111\u1ed3 th\u1ecb cu\u1ed1i c\u00f9ng l\u00e0 \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u1ee7a gi\u00e1 tr\u1ecb n\u00e0y. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>C\u00f3 hai to\u00e1n t\u1eed g\u1eafn v\u1edbi \u0111\u1ea1o h\u00e0m c\u1ea5p hai trong kh\u00f4ng gian hai chi\u1ec1u: to\u00e1n t\u1eed Laplacian (Laplacian operator) v\u00e0 to\u00e1n t\u1eed \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng (second directional derivative)</p>"},{"location":"blog/edge-detection/#41-toan-tu-laplacian","title":"4.1. To\u00e1n t\u1eed Laplacian","text":"<p>To\u00e1n t\u1eed Laplacian \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng t\u1ed5ng \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ea5p hai theo ph\u01b0\u01a1ng \\(Ox\\) v\u00e0 \\(Oy\\)</p> \\[ \\nabla^2f = \\frac{\\partial^2 f}{\\partial x^2} + \\frac{\\partial^2 f}{\\partial y^2} \\] <p>Trong \u0111\u00f3 \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u1ee7a \\(f\\) theo ph\u01b0\u01a1ng \\(Ox\\) \u0111\u01b0\u1ee3c x\u1ea5p x\u1ec9 nh\u01b0 sau:</p> \\[ \\begin{aligned} \\frac{\\partial^2 f}{\\partial x^2} &amp; = \\frac{\\partial G_x}{\\partial x} \\\\ &amp; = \\frac{\\partial f[i,j+1] - \\partial f[i,j]}{\\partial x} \\\\ &amp; = \\frac{\\partial f[i,j+1]}{\\partial x} - \\frac{\\partial f[i,j]}{\\partial x} \\\\ &amp; = (f[i,j+2] - f[i,j+1]) - (f[i,j+1] - f[i,j]) \\\\ &amp; = f[i,j+2] - 2f[i,j+1] + f[i,j] \\\\ \\end{aligned} \\] <p>Tuy nhi\u00ean c\u00f4ng th\u1ee9c tr\u00ean cho ta x\u1ea5p x\u1ec9 \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ea5p hai theo ph\u01b0\u01a1ng \\(Ox\\) t\u1ea1i pixel c\u00f3 v\u1ecb tr\u00ed \\([i,j+1]\\), \u0111\u1ec3 t\u00ednh \u0111\u1ea1o h\u00e0m n\u00e0y t\u1ea1i v\u1ecb tr\u00ed \\([i,j]\\) ta thay \\(j\\) b\u1edfi \\(j-1\\):</p> \\[ \\begin{aligned} \\frac{\\partial^2 f}{\\partial x^2} &amp; = f[i,j+1] - 2f[i,j] + f[i,j-1] \\end{aligned} \\] <p>T\u01b0\u01a1ng t\u1ef1, ta c\u00f3 \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ea5p 2 theo ph\u01b0\u01a1ng \\(Oy\\) t\u1ea1i pixel c\u00f3 v\u1ecb tr\u00ed \\([i,j]\\):</p> \\[ \\frac{\\partial^2 f}{\\partial y^2} = f[i+1,j] - 2f[i,j] + f[i-1,j] \\] <p>T\u1ed5ng hai gi\u00e1 tr\u1ecb tr\u00ean cho ta to\u00e1n t\u1eed Laplacian. Ta c\u00f3 kernel t\u00edch ch\u1eadp c\u1ee7a to\u00e1n t\u1eed n\u00e0y nh\u01b0 sau:</p> \\[ \\nabla^2 \\approx \\begin{bmatrix} 0 &amp; 1 &amp; 0 \\\\ 1 &amp; -4 &amp; 1 \\\\ 0 &amp; 1 &amp; 0\\end{bmatrix} \\] <p>Sau khi d\u00f9ng kernel \u0111\u1ec3 t\u00ednh to\u00e1n gi\u00e1 tr\u1ecb Laplacian c\u1ee7a m\u1ed7i pixel trong \u1ea3nh, to\u00e1n t\u1eed Laplacian s\u1ebd nh\u1eadn di\u1ec7n m\u1ed9t pixel l\u00e0 c\u1ea1nh n\u1ebfu qua n\u00f3 c\u00f3 s\u1ef1 chuy\u1ec3n h\u00f3a qua \u0111i\u1ec3m kh\u00f4ng. Kh\u00f4ng ph\u1ea3i b\u1ea5t k\u00ec pixel n\u00e0o mang gi\u00e1 tr\u1ecb 0 c\u0169ng \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh, v\u00ed d\u1ee5 nh\u1eefng v\u00f9ng c\u00f3 c\u00e1c pixel \u0111\u1ec1u mang gi\u00e1 tr\u1ecb 0 (trivial zeros) th\u00ec kh\u00f4ng \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh.</p> <p>T\u1eeb c\u00e1c c\u00f4ng th\u1ee9c tr\u00ean v\u00e0 kernel t\u00edch ch\u1eadp c\u1ee7a to\u00e1n t\u1eed Laplacian, ta nh\u1eadn th\u1ea5y r\u1eb1ng tuy \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a d\u1ef1a tr\u00ean \u0111\u1ea1o h\u00e0m ri\u00eang theo ph\u01b0\u01a1ng \\(Ox\\) v\u00e0 \\(Oy\\), to\u00e1n t\u1eed Laplacian l\u00e0 m\u1ed9t \u0111\u1ea1o h\u00e0m v\u00f4 h\u01b0\u1edbng. Ngh\u0129a l\u00e0 n\u1ebfu ta t\u00ednh gi\u00e1 tr\u1ecb Laplacian t\u1ea1i m\u1ed9t pixel nh\u1ea5t \u0111\u1ecbnh, n\u1ebfu ta xoay b\u1ee9c \u1ea3nh 2D xung quanh pixel n\u00e0y theo b\u1ea5t k\u00ec chi\u1ec1u n\u00e0o th\u00ec gi\u00e1 tr\u1ecb Laplacian n\u00e0y v\u1eabn kh\u00f4ng thay \u0111\u1ed5i (\u0111i\u1ec1u n\u00e0y l\u00e0 kh\u00f4ng \u0111\u00fang \u0111\u1ed1i v\u1edbi \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng m\u00e0 ta s\u1ebd \u0111\u1ec1 c\u1eadp \u0111\u1ebfn \u1edf ph\u1ea7n ti\u1ebfp theo).</p>"},{"location":"blog/edge-detection/#42-ao-ham-cap-hai-co-huong","title":"4.2. \u0110\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng","text":"<p>\u0110\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng l\u00e0 \u0111\u1ea1o h\u00e0m c\u1ea5p hai \u0111\u01b0\u1ee3c t\u00ednh theo h\u01b0\u1edbng c\u1ee7a gradient. S\u1eed d\u1ee5ng \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng kh\u00e1c v\u1edbi s\u1eed d\u1ee5ng Laplacian \u1edf ch\u1ed7, n\u1ebfu nh\u01b0 Laplacian nh\u1eadn m\u1ed9t \u0111i\u1ec3m l\u00e0 c\u1ea1nh n\u1ebfu nh\u01b0 \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a n\u00f3 theo ph\u01b0\u01a1ng \\(Ox\\) v\u00e0 \\(Oy\\) \u0111\u1ec1u \u0111\u1ea1t c\u1ef1c tr\u1ecb, th\u00ec \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng s\u1ebd nh\u1eadn m\u1ed9t \u0111i\u1ec3m l\u00e0 c\u1ea1nh n\u1ebfu nh\u01b0 n\u00f3 l\u00e0 \u0111i\u1ec3m v\u1ec1 kh\u00f4ng \u0111\u1ed1i v\u1edbi \u0111\u1ea1o h\u00e0m c\u1ea5p hai theo h\u01b0\u1edbng vu\u00f4ng g\u00f3c v\u1edbi h\u01b0\u1edbng c\u1ee7a c\u1ea1nh (h\u01b0\u1edbng gradient).</p> \\[ \\frac{\\partial^2 f}{\\partial n^2} = \\frac{f_x^2f_{xx} + 2f_xf_yf_{xy} + f_y^2f_{yy}}{f_x^2 + f_y^2} \\] <p>Ph\u1ea7n ch\u1ee9ng minh d\u01b0\u1edbi \u0111\u00e2y d\u00e0nh cho b\u1ea1n \u0111\u1ecdc mu\u1ed1n hi\u1ec3u th\u00eam v\u1ec1 c\u00f4ng th\u1ee9c tr\u00ean, kh\u00f4ng li\u00ean quan \u0111\u1ebfn nh\u1eefng ph\u1ea7n kh\u00e1c n\u00ean ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ecf qua.</p> Ch\u1ee9ng minh <p>Gradient t\u1ea1i \u0111i\u1ec3m \\((x,y)\\): \\(\\nabla f = (f_x, f_y)\\)</p> <p>Vector \u0111\u01a1n v\u1ecb c\u1ee7a vector gradient t\u1ea1i \u0111i\u1ec3m \\((x,y)\\): \\(\\overrightarrow{n}_0 = \\frac{1}{\\sqrt{f_x^2 + f_y^2}}(f_x,f_y)\\)</p> <p>\u0110\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a h\u00e0m \\(f\\) t\u1ea1i \u0111i\u1ec3m \\((x,y)\\) theo h\u01b0\u1edbng c\u1ee7a vector \\(\\overrightarrow{n}\\):</p> \\[ \\frac{\\partial f}{\\partial n} = \\nabla f \\cdot \\overrightarrow{n}_0 = f_x \\cdot \\frac{f_x}{\\sqrt{f_x^2+f_y^2}} + f_y \\cdot \\frac{f_y}{\\sqrt{f_x^2 + f_y^2}} = \\sqrt{f_x^2 + f_y^2} \\] <p>\u0110\u1ea1o h\u00e0m c\u1ea5p hai c\u1ee7a h\u00e0m \\(f\\) t\u1ea1i \u0111i\u1ec3m \\((x,y)\\) theo h\u01b0\u1edbng c\u1ee7a vector \\(\\overrightarrow{n}\\):</p> \\[ \\begin{aligned} \\frac{\\partial^2 f}{\\partial n^2} &amp; = \\frac{\\partial \\left(\\sqrt{f_x^2+f_y^2}\\right)}{\\partial n} \\\\ &amp; = \\frac{f_xf_{xx}+f_yf_{xy}}{\\sqrt{f_x^2+f_y^2}} \\cdot \\frac{f_x}{\\sqrt{f_x^2+f_y^2}} + \\frac{f_xf_{xy}+f_yf_{yy}}{\\sqrt{f_x^2+f_y^2}} \\cdot \\frac{f_y}{\\sqrt{f_x^2+f_y^2}} \\\\ &amp; = \\frac{f_x^2f_{xx} + 2f_xf_yf_{xy} + f_y^2f_{yy}}{f_x^2+f_y^2} \\end{aligned} \\] <p>Tuy mang l\u1ea1i k\u1ebft qu\u1ea3 t\u1ed1t trong tr\u01b0\u1eddng h\u1ee3p l\u00fd t\u01b0\u1edfng, c\u00e1c to\u00e1n t\u1eed li\u00ean quan \u0111\u1ebfn \u0111\u1ea1o h\u00e0m c\u1ea5p hai l\u1ea1i hi\u1ebfm khi \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi ch\u00fang r\u1ea5t d\u1ec5 b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nhi\u1ec5u: ch\u1ec9 m\u1ed9t dao \u0111\u1ed9ng nh\u1ecf c\u1ee7a \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t t\u1ea1o th\u00e0nh m\u1ed9t \u0111\u1ec9nh s\u1ebd d\u1eabn \u0111\u1ebfn s\u1ef1 t\u1ea1o th\u00e0nh m\u1ed9t \u0111i\u1ec3m v\u1ec1 kh\u00f4ng c\u1ee7a \u0111\u1ea1o h\u00e0m c\u1ea5p hai. \u0110\u1ec3 gi\u1ea3m s\u1ef1 \u1ea3nh h\u01b0\u1edfng c\u1ee7a nhi\u1ec5u, ng\u01b0\u1eddi ta d\u00f9ng c\u00e1c b\u1ed9 l\u1ecdc nhi\u1ec5u (filter) m\u00e0 n\u1ed5i b\u1eadt l\u00e0 Gaussian filter. Trong ph\u1ea7n ti\u1ebfp theo, ch\u00fang ta s\u1ebd c\u00f9ng nhau t\u00ecm hi\u1ec3u v\u1ec1 h\u01b0\u1edbng ti\u1ebfp c\u1eadn k\u1ebft h\u1ee3p Gaussian filter v\u00e0 to\u00e1n t\u1eed Laplacian, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng \u0111\u1ecbnh l\u00fd \u0111\u1ea1o h\u00e0m c\u1ee7a ph\u00e9p t\u00edch ch\u1eadp (Derivative Theorem of Convolution) \u0111\u1ec3 r\u00fat g\u1ecdn c\u00e1c b\u01b0\u1edbc t\u00ednh to\u00e1n c\u1ee7a thu\u1eadt to\u00e1n n\u00e0y.</p>"},{"location":"blog/edge-detection/#5-phuong-phap-tim-canh-tren-anh-nhieu","title":"5. Ph\u01b0\u01a1ng ph\u00e1p t\u00ecm c\u1ea1nh tr\u00ean \u1ea3nh nhi\u1ec5u","text":""},{"location":"blog/edge-detection/#51-anh-huong-cua-nhieu-en-ao-ham","title":"5.1. \u1ea2nh h\u01b0\u1edfng c\u1ee7a nhi\u1ec5u \u0111\u1ebfn \u0111\u1ea1o h\u00e0m","text":"<p>\u0110\u1ec3 c\u00f3 th\u1ec3 h\u00ecnh dung r\u00f5 r\u00e0ng h\u01a1n v\u1ec1 t\u1ea7m \u1ea3nh h\u01b0\u1edfng c\u1ee7a nhi\u1ec5u \u0111\u1ebfn b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh, ch\u00fang ta h\u00e3y c\u00f9ng nhau quan s\u00e1t b\u1ee9c h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y. L\u01b0u \u00fd r\u1eb1ng ch\u00fang ta \u0111ang gi\u1ea3 s\u1eed b\u1ee9c \u1ea3nh ta \u0111ang x\u00e9t l\u00e0 1D.</p> <p>      H\u00ecnh 10: H\u00ecnh 1, 2: \u0110\u1ed3 th\u1ecb bi\u1ec3u di\u1ec5n m\u1ed9t c\u1ea1nh v\u00e0 \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a c\u1ee7a n\u00f3. H\u00ecnh 3, 4: \u0110\u1ed3 th\u1ecb bi\u1ec3u di\u1ec5n c\u1ea1nh t\u01b0\u01a1ng \u1ee9ng \u0111\u00e3 \u0111\u01b0\u1ee3c th\u00eam nhi\u1ec5u v\u00e0 \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a n\u00f3. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>Ta th\u1ea5y r\u1eb1ng v\u1edbi s\u1ef1 xu\u1ea5t hi\u1ec7n c\u1ee7a nhi\u1ec5u, ta kh\u00f4ng th\u1ec3 x\u00e1c \u0111\u1ecbnh \u0111\u00e2u l\u00e0 v\u1ecb tr\u00ed c\u1ee7a c\u1ea1nh d\u1ef1a tr\u00ean \u0111\u1ed3 th\u1ecb \u0111\u1ea1o h\u00e0m n\u1eefa.</p> <p>\u0110\u1ec3 kh\u1eafc ph\u1ee5c t\u00ecnh tr\u1ea1ng n\u00e0y, ta s\u1eed d\u1ee5ng Gaussian filter \u0111\u1ec3 lo\u1ea1i b\u1ecf nhi\u1ec5u tr\u01b0\u1edbc khi t\u00ednh \u0111\u1ea1o h\u00e0m. K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c kh\u1ea3 quan h\u01a1n r\u1ea5t nhi\u1ec1u:</p> <p>      H\u00ecnh 11: \u0110\u1ed3 th\u1ecb bi\u1ec3u di\u1ec5n c\u1ea1nh sau khi \u0111\u01b0\u1ee3c kh\u1eed nhi\u1ec5u b\u1edfi Gaussian filter v\u00e0 \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u1ee7a n\u00f3. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p>"},{"location":"blog/edge-detection/#52-ao-ham-cua-gaussian-derivative-of-gaussian","title":"5.2. \u0110\u1ea1o h\u00e0m c\u1ee7a Gaussian (Derivative of Gaussian)","text":"<p>M\u1ed9t c\u00e1ch t\u1ef1 nhi\u00ean, ta r\u00fat ra quy tr\u00ecnh t\u00ecm \u0111\u1ea1o h\u00e0m c\u1ee7a b\u1ee9c \u1ea3nh nh\u01b0 sau: d\u00f9ng Gaussian kernel \u0111\u1ec3 th\u1ef1c hi\u1ec7n ph\u00e9p t\u00edch ch\u1eadp l\u00ean \u1ea3nh \u0111ang b\u1ecb nhi\u1ec5u, sau \u0111\u00f3 t\u00ednh \u0111\u1ea1o h\u00e0m \u0111\u1ed1i v\u1edbi b\u1ee9c \u1ea3nh \u0111\u00e3 \u0111\u01b0\u1ee3c kh\u1eed nhi\u1ec5u.</p> <p>      H\u00ecnh 12: C\u00e1c b\u01b0\u1edbc c\u1ee7a m\u1ed9t b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh \u0111\u1ed1i v\u1edbi \u1ea3nh nhi\u1ec5u (C\u00e1ch 1: L\u1ea5y \u0111\u1ea1o h\u00e0m c\u1ee7a \u1ea3nh sau khi \u0111\u00e3 \u00e1p d\u1ee5ng Gaussian filter cho \u1ea3nh). \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>Tuy nhi\u00ean, ta c\u00f3 th\u1ec3 r\u00fat g\u1ecdn quy tr\u00ecnh n\u00e0y b\u1eb1ng c\u00e1ch l\u1ea5y \u0111\u1ea1o h\u00e0m c\u1ee7a Gaussian kernel \u0111\u1ec3 t\u1ea1o th\u00e0nh m\u1ed9t kernel m\u1edbi, sau \u0111\u00f3 d\u00f9ng ph\u00e9p t\u00edch ch\u1eadp \u0111\u1ed1i v\u1edbi kernel n\u00e0y v\u00e0 b\u1ee9c \u1ea3nh g\u1ed1c (c\u00f3 ch\u1ee9a nhi\u1ec5u). Quy tr\u00ecnh n\u00e0y gi\u00fap ta ti\u1ebft ki\u1ec7m m\u1ed9t l\u01b0\u1ee3ng l\u1edbn th\u1eddi gian v\u00ec th\u00f4ng th\u01b0\u1eddng k\u00edch th\u01b0\u1edbc c\u1ee7a b\u1ee9c \u1ea3nh l\u1edbn h\u01a1n k\u00edch th\u01b0\u1edbc c\u1ee7a kernel r\u1ea5t nhi\u1ec1u. M\u1ed9t tr\u01b0\u1eddng h\u1ee3p m\u00e0 vi\u1ec7c l\u1ea5y \u0111\u1ea1o h\u00e0m c\u1ee7a Gaussian kernel \u0111\u1eb7c bi\u1ec7t h\u1eefu d\u1ee5ng \u0111\u00f3 l\u00e0 khi ta mu\u1ed1n \u00e1p d\u1ee5ng kernel n\u00e0y cho nhi\u1ec1u b\u1ee9c \u1ea3nh kh\u00e1c nhau.</p> <p>      H\u00ecnh 13: C\u00e1c b\u01b0\u1edbc c\u1ee7a m\u1ed9t b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh \u0111\u1ed1i v\u1edbi \u1ea3nh nhi\u1ec5u (C\u00e1ch 2: L\u1ea5y \u0111\u1ea1o h\u00e0m c\u1ee7a Gaussian kernel, sau \u0111\u00f3 m\u1edbi \u00e1p d\u1ee5ng kernel n\u00e0y cho \u1ea3nh). \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>Vi\u1ec7c r\u00fat g\u1ecdn n\u00e0y d\u1ef1a tr\u00ean t\u00ednh tuy\u1ebfn t\u00ednh c\u1ee7a ph\u00e9p t\u00edch ch\u1eadp (ch\u00fang ta s\u1ebd kh\u00f4ng \u0111i s\u00e2u v\u00e0o ch\u1ee9ng minh c\u00f4ng th\u1ee9c n\u00e0y), c\u1ee5 th\u1ec3:</p> \\[ \\frac{d}{dx}(g*f) = \\left(\\frac{d}{dx}g\\right)*f \\]"},{"location":"blog/edge-detection/#53-laplacian-cua-gaussian-laplacian-of-gaussian-log","title":"5.3. Laplacian c\u1ee7a Gaussian (Laplacian of Gaussian - LoG)","text":"<p>T\u01b0\u01a1ng t\u1ef1 nh\u01b0 khi l\u1ea5y \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t, ta c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng b\u1ed9 l\u1ecdc Gaussian \u0111\u1ec3 kh\u1eed nhi\u1ec5u tr\u01b0\u1edbc khi \u00e1p d\u1ee5ng to\u00e1n t\u1eed Laplacian l\u00ean \u1ea3nh, quy tr\u00ecnh n\u00e0y c\u0169ng c\u00f3 th\u1ec3 r\u00fat g\u1ecdn th\u00e0nh hai b\u01b0\u1edbc nh\u01b0 tr\u00ean:</p> <ol> <li>\u00c1p d\u1ee5ng to\u00e1n t\u1eed Laplacian l\u00ean Gaussian kernel \u0111\u1ec3 t\u1ea1o th\u00e0nh kernel m\u1edbi, kernel n\u00e0y c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Laplacian c\u1ee7a Gaussian (Laplacian of Gaussian hay LoG)</li> <li>Th\u1ef1c hi\u1ec7n ph\u00e9p t\u00edch ch\u1eadp \u0111\u1ed1i v\u1edbi kernel m\u1edbi t\u1ea1o th\u00e0nh v\u00e0 \u1ea3nh g\u1ed1c (ch\u01b0a kh\u1eed nhi\u1ec5u)</li> </ol> <p>Vi\u1ec7c r\u00fat g\u1ecdn n\u00e0y c\u0169ng d\u1ef1a tr\u00ean m\u1ed9t t\u00ednh ch\u1ea5t c\u1ee7a ph\u00e9p t\u00edch ch\u1eadp:</p> \\[ \\nabla^2(g*f) = \\nabla^2g*f \\] <p>Trong \u0111\u00f3 $ g $ l\u00e0 m\u1ed9t h\u00e0m Gaussian hai bi\u1ebfn s\u1ed1</p> \\[ g(x,y) = \\frac{1}{{2\\pi}\\sigma^2}e^{-\\frac{x^2+y^2}{2\\sigma^2}} \\] <p>Suy ra</p> \\[ \\begin{aligned} \\nabla^2g(x,y) &amp; = \\frac{1}{2 \\pi \\sigma^2}(\\frac{x^2}{\\sigma^4} - \\frac{1}{\\sigma^2})e^{-\\frac{x^2+y^2}{2 \\sigma^2}} + \\frac{1}{2 \\pi \\sigma^2}(\\frac{y^2}{\\sigma^4} - \\frac{1}{\\sigma^2})e^{-\\frac{x^2+y^2}{2 \\sigma^2}} \\\\ &amp; = -\\frac{1}{\\pi \\sigma^4}\\left( 1 -\\frac{x^2 + y^2}{2 \\sigma^2}\\right)e^{-\\frac{x^2+y^2}1{2\\sigma^2}}\\end{aligned} \\] <p>Thu\u1eadt to\u00e1n tr\u00ean \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Laplacian of Gausian (LoG) hay Marr-Hildreth detector (thu\u1eadt to\u00e1n \u0111\u01b0\u1ee3c \u0111\u1ec1 xu\u1ea5t b\u1edfi D. Marr v\u00e0 E. Hildreth v\u00e0o n\u0103m 1980). To\u00e1n t\u1eed LoG c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 to\u00e1n t\u1eed Mexican Hat v\u00ec h\u00ecnh d\u1ea1ng \u0111\u1eb7c bi\u1ec7t c\u1ee7a n\u00f3:</p> <p>      H\u00ecnh 14: H\u00ecnh d\u1ea1ng c\u1ee7a Gaussian kernel sau khi \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng to\u00e1n t\u1eed Laplacian gi\u1ed1ng nh\u01b0 m\u1ed9t chi\u1ebfc m\u0169. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p>"},{"location":"blog/edge-detection/#6-canny-edge-detector","title":"6. Canny Edge Detector","text":"<p>\u0110\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi John F. Canny v\u00e0o n\u0103m 1986, thu\u1eadt to\u00e1n Canny Edge Detection cho \u0111\u1ebfn nay v\u1eabn l\u00e0 m\u1ed9t trong nh\u1eefng thu\u1eadt to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn nh\u1ea5t v\u00ec t\u00ednh hi\u1ec7u qu\u1ea3 c\u1ee7a n\u00f3.</p> <p>Tr\u01b0\u1edbc khi \u0111i v\u00e0o thu\u1eadt to\u00e1n c\u1ee5 th\u1ec3, ch\u00fang ta c\u00f9ng nhau t\u00ecm hi\u1ec3u m\u1ed9t v\u00e0i kh\u00e1i ni\u1ec7m nh\u00e9!</p>"},{"location":"blog/edge-detection/#61-non-maxima-suppression","title":"6.1. Non-maxima suppression","text":"<p>Nh\u01b0 ch\u00fang ta \u0111\u00e3 bi\u1ebft, vi\u1ec7c s\u1eed d\u1ee5ng \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t cho b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh \u0111\u00f2i h\u1ecfi ta ph\u1ea3i x\u00e1c \u0111\u1ecbnh m\u1ed9t ng\u01b0\u1ee1ng nh\u1ea5t \u0111\u1ecbnh \u0111\u1ec3 nh\u1eadn di\u1ec7n m\u1ed9t pixel v\u1edbi \u0111\u1ed9 l\u1edbn gradient b\u1ea5t k\u00ec c\u00f3 l\u00e0 c\u1ea1nh hay kh\u00f4ng. \u0110\u00e2y l\u00e0 c\u00f4ng vi\u1ec7c kh\u00e1 \u0111au \u0111\u1ea7u b\u1edfi n\u1ebfu ch\u1ecdn m\u1ed9t ng\u01b0\u1ee1ng th\u1ea5p, s\u1ebd c\u00f3 r\u1ea5t nhi\u1ec1u pixel \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh, \u0111\u1eb7c bi\u1ec7t \u1edf nh\u1eefng n\u01a1i m\u00e0 s\u1ef1 thay \u0111\u1ed5i \u0111\u1ea1o h\u00e0m di\u1ec5n ra m\u1ed9t c\u00e1ch t\u1eeb t\u1eeb do c\u1ea1nh \u0111\u00e3 b\u1ecb l\u00e0m m\u1edd khi l\u1ecdc nhi\u1ec5u ho\u1eb7c do h\u1ea1n ch\u1ebf nh\u1ea5t \u0111\u1ecbnh c\u1ee7a c\u00e1c lo\u1ea1i m\u00e1y \u1ea3nh. Nh\u01b0ng n\u1ebfu ch\u1ecdn m\u1ed9t ng\u01b0\u1ee1ng cao, ta s\u1ebd b\u1ecb m\u1ea5t r\u1ea5t nhi\u1ec1u pixel l\u1ebd ra ph\u1ea3i \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n l\u00e0 c\u1ea1nh. B\u1ea1n \u0111\u1ecdc c\u00f3 th\u1ec3 tham kh\u1ea3o b\u1ee9c h\u00ecnh b\u00ean d\u01b0\u1edbi.</p> <p>      H\u00ecnh 15: \u1ea2nh thu \u0111\u01b0\u1ee3c sau khi t\u00ednh to\u00e1n \u0111\u1ed9 l\u1edbn gradient c\u1ee7a t\u1eebng pixel trong \u1ea3nh g\u1ed1c. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>Trong b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh th\u00ec vi\u1ec7c x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c v\u1ecb tr\u00ed c\u1ee7a c\u1ea1nh l\u00e0 c\u1ea7n thi\u1ebft. Trong b\u1ee9c \u1ea3nh tr\u00ean, ch\u00fang ta kh\u00f4ng bi\u1ebft ph\u1ea3i ch\u1ecdn ng\u01b0\u1ee1ng nh\u01b0 th\u1ebf n\u00e0o \u0111\u1ec3 v\u1eeba c\u00f3 th\u1ec3 thu h\u1eb9p \u0111\u01b0\u1ee3c \u0111\u1ed9 r\u1ed9ng c\u1ee7a c\u1ea1nh, v\u1eeba tr\u00e1nh kh\u00f4ng \u0111\u1ec3 b\u1ecb m\u1ea5t c\u1ea1nh \u1edf nh\u1eefng n\u01a1i kh\u00e1c.</p> <p>\u1ede tr\u00ean ch\u00fang ta \u0111\u00e3 t\u00ecm hi\u1ec3u m\u1ed9t to\u00e1n t\u1eed gi\u00fap nh\u1eadn di\u1ec7n c\u1ea1nh ch\u1ec9 t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed m\u00e0 \u0111\u1ed9 l\u1edbn gradient \u0111\u1ea1t c\u1ef1c \u0111\u1ea1i, \u0111\u00f3 l\u00e0 to\u00e1n t\u1eed Laplacian, tuy nhi\u00ean to\u00e1n t\u1eed n\u00e0y r\u1ea5t d\u1ec5 b\u1ecb \u1ea3nh h\u01b0\u1edfng b\u1edfi nhi\u1ec5u: ch\u1ec9 m\u1ed9t dao \u0111\u1ed9ng nh\u1ecf trong \u0111\u1ea1o h\u00e0m c\u1ea5p m\u1ed9t c\u0169ng t\u1ea1o th\u00e0nh \u0111i\u1ec3m v\u1ec1 kh\u00f4ng trong \u0111\u1ea1o h\u00e0m c\u1ea5p hai. M\u1ed9t k\u0129 thu\u1eadt kh\u00e1c c\u0169ng gi\u00fap ta gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 n\u00e0y \u0111\u00f3 l\u00e0 Non-maxima suppression. Non-maxima suppression t\u1eadn d\u1ee5ng th\u00eam m\u1ed9t th\u00f4ng tin n\u1eefa: h\u01b0\u1edbng c\u1ee7a gradient (\u1edf ph\u1ea7n tr\u00ean, ta bi\u1ebft r\u1eb1ng t\u1ea1i m\u1ed7i pixel ta \u0111\u1ec1u t\u00ednh \u0111\u01b0\u1ee3c \u0111\u1ed9 l\u1edbn v\u00e0 h\u01b0\u1edbng c\u1ee7a gradient). T\u1eeb \u0111\u00f3 k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c t\u1eeb non-maxima suppression \u00edt nhi\u1ec5u h\u01a1n k\u1ebft qu\u1ea3 t\u1eeb Laplacian b\u1edfi n\u00f3 kh\u00f4ng l\u1ea5y c\u1ef1c \u0111\u1ea1i c\u1ee7a \u0111\u1ed9 l\u1edbn gradient theo m\u1ecdi h\u01b0\u1edbng m\u00e0 ch\u1ec9 theo m\u1ed9t h\u01b0\u1edbng nh\u1ea5t \u0111\u1ecbnh, hay n\u00f3i c\u00e1ch kh\u00e1c, thu\u1eadt to\u00e1n n\u00e0y kh\u00f4ng l\u1ea5y c\u00e1c \u0111i\u1ec3m v\u1ec1 kh\u00f4ng theo m\u1ecdi h\u01b0\u1edbng m\u00e0 ch\u1ec9 theo m\u1ed9t h\u01b0\u1edbng duy nh\u1ea5t \u0111\u1ed1i v\u1edbi m\u1ed7i pixel: h\u01b0\u1edbng c\u1ee7a gradient, hay h\u01b0\u1edbng vu\u00f4ng g\u00f3c v\u1edbi h\u01b0\u1edbng c\u1ee7a \"c\u1ea1nh\" \u0111ang x\u00e9t.</p> <p>H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y gi\u00fap ta h\u00ecnh dung r\u00f5 h\u01a1n v\u1ec1 thu\u1eadt to\u00e1n n\u00e0y:</p> <p>      H\u00ecnh 16: V\u00ed d\u1ee5 v\u1ec1 thu\u1eadt to\u00e1n non-maxima suppression. Pixel \u1edf v\u1ecb tr\u00ed ch\u1ea5m xanh trong h\u00ecnh th\u1ee9 nh\u1ea5t \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i \u0111\u1ec3 x\u00e9t c\u1ea1nh, pixel t\u01b0\u01a1ng \u1ee9ng trong h\u00ecnh th\u1ee9 hai th\u00ec kh\u00f4ng. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>\u1ede tr\u01b0\u1eddng h\u1ee3p \u0111\u1ea7u ti\u00ean, pixel ta \u0111ang x\u00e9t c\u00f3 gi\u00e1 tr\u1ecb \u0111\u1ed9 l\u1edbn gradient \u0111\u1ea1t c\u1ef1c \u0111\u1ea1i theo h\u01b0\u1edbng gradient c\u1ee7a pixel n\u00e0y (ta c\u00f3 th\u1ec3 bi\u1ebft gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 \u0111\u1ea1t c\u1ef1c \u0111\u1ea1i hay kh\u00f4ng b\u1eb1ng c\u00e1ch so s\u00e1nh pixel n\u00e0y v\u1edbi hai pixel l\u00e2n c\u1eadn theo h\u01b0\u1edbng t\u01b0\u01a1ng \u1ee9ng). V\u00ec th\u1ebf, ta gi\u1eef l\u1ea1i pixel n\u00e0y, \u0111\u1ec3 \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb t\u1ea1i pixel n\u00e0y kh\u00f4ng \u0111\u1ed5i tr\u01b0\u1edbc v\u00e0 sau nonmaxima suppression. \u1ede tr\u01b0\u1eddng h\u1ee3p th\u1ee9 hai, do pixel n\u00e0y c\u00f3 gi\u00e1 tr\u1ecb \u0111\u1ed9 l\u1edbn gradient nh\u1ecf h\u01a1n pixel b\u00ean ph\u1ea3i c\u1ee7a n\u00f3 theo h\u01b0\u1edbng gradient, n\u00ean ta kh\u00f4ng gi\u1eef l\u1ea1i pixel n\u00e0y cho b\u01b0\u1edbc ti\u1ebfp theo. Sau non-maxima suppression, gi\u00e1 tr\u1ecb c\u1ee7a pixel n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1eb7t v\u1ec1 0. L\u01b0u \u00fd r\u1eb1ng thu\u1eadt to\u00e1n non-maxima suppression ch\u1ec9 cho \u0111\u1ea7u ra l\u00e0 li\u1ec7u m\u1ed9t pixel c\u00f3 \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c gi\u1eef l\u1ea1i \u0111\u1ec3 x\u00e9t l\u00e0 c\u1ea1nh hay kh\u00f4ng, n\u00f3 kh\u00f4ng \u0111\u1ea3m b\u1ea3o c\u00e1c pixel \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i th\u00ec ch\u1eafc ch\u1eafn l\u00e0 c\u1ea1nh.</p> <p>      H\u00ecnh 17: \u1ea2nh thu \u0111\u01b0\u1ee3c tr\u01b0\u1edbc v\u00e0 sau non-maxima suppression. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p>"},{"location":"blog/edge-detection/#62-hysteresis-thresholding","title":"6.2. Hysteresis thresholding","text":"<p>Quay l\u1ea1i v\u1ea5n \u0111\u1ec1 ch\u1ecdn ng\u01b0\u1ee1ng: vi\u1ec7c ch\u1ecdn m\u1ed9t ng\u01b0\u1ee1ng cao hay th\u1ea5p lu\u00f4n l\u00e0 m\u1ed9t s\u1ef1 \u0111\u00e1nh \u0111\u1ed5i gi\u1eefa s\u1ed1 l\u01b0\u1ee3ng c\u1ea1nh l\u00e0 false positives v\u00e0 false negatives m\u00e0 ta s\u1ebd thu \u0111\u01b0\u1ee3c. Thu\u1eadt to\u00e1n hysteresis thresholding \u0111\u01b0\u1ee3c \u0111\u01b0a ra nh\u1eb1m gi\u00fap ta gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y.</p> <p>\u00dd t\u01b0\u1edfng c\u1ee7a hysteresis thresholding l\u00e0 ta s\u1ebd ch\u1ecdn 2 ng\u01b0\u1ee1ng thay v\u00ec 1 ng\u01b0\u1ee1ng: c\u00e1c pixel c\u00f3 gi\u00e1 tr\u1ecb n\u1eb1m tr\u00ean ng\u01b0\u1ee1ng cao th\u00ec ch\u1eafc ch\u1eafn l\u00e0 c\u1ea1nh (sure-edge pixel), c\u00e1c pixel c\u00f3 gi\u00e1 tr\u1ecb n\u1eb1m d\u01b0\u1edbi ng\u01b0\u1ee1ng th\u1ea5p th\u00ec ch\u1eafc ch\u1eafn kh\u00f4ng l\u00e0 c\u1ea1nh. Sau \u0111\u00f3 ta b\u1eaft \u0111\u1ea7u x\u00e9t c\u00e1c pixel n\u1eb1m gi\u1eefa hai ng\u01b0\u1ee1ng n\u00e0y, nh\u1eefng pixel n\u00e0o l\u00e0 l\u00e2n c\u1eadn c\u1ee7a c\u00e1c \"sure-edge pixel\" s\u1ebd \u0111\u01b0\u1ee3c nh\u1eadn di\u1ec7n l\u00e0 c\u1ea1nh, \u0111i\u1ec1u ng\u01b0\u1ee3c l\u1ea1i \u0111\u1ed1i v\u1edbi nh\u1eefng pixel kh\u00f4ng l\u00e0 l\u00e2n c\u1eadn c\u1ee7a \"sure-edge pixel\" n\u00e0o c\u1ea3.</p> <p>      H\u00ecnh 18: V\u00ed d\u1ee5 v\u1ec1 thu\u1eadt to\u00e1n hysteresis thresholding. \u1ea2nh tham kh\u1ea3o t\u1ea1i \u0111\u00e2y.     </p> <p>Quan s\u00e1t h\u00ecnh tr\u00ean, ta th\u1ea5y r\u1eb1ng A v\u00e0 B ch\u1eafc ch\u1eafn l\u00e0 c\u1ea1nh v\u00ec gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang cao h\u01a1n ng\u01b0\u1ee1ng tr\u00ean, D ch\u1eafc ch\u1eafn kh\u00f4ng l\u00e0 c\u1ea1nh v\u00ec gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 th\u1ea5p h\u01a1n ng\u01b0\u1ee1ng d\u01b0\u1edbi, C v\u00e0 E c\u00f3 gi\u00e1 tr\u1ecb n\u1eb1m gi\u1eefa hai ng\u01b0\u1ee1ng, tuy nhi\u00ean C l\u00e0 c\u1ea1nh do n\u00f3 l\u00e0 l\u00e2n c\u1eadn c\u1ee7a B, c\u00f2n E th\u00ec kh\u00f4ng.</p> <p>Ch\u00fang ta c\u00f9ng so s\u00e1nh thu\u1eadt to\u00e1n hysteresis thresholding v\u1edbi c\u00e1ch ch\u1ecdn ng\u01b0\u1ee1ng th\u00f4ng th\u01b0\u1eddng:</p> <p>      H\u00ecnh 19: H\u00ecnh 1: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c khi \u00e1p d\u1ee5ng hysteresis thresholding. H\u00ecnh 2: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c khi ch\u1ec9 d\u00f9ng m\u1ed9t ng\u01b0\u1ee1ng cao. H\u00ecnh 3: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c khi ch\u1ec9 d\u00f9ng m\u1ed9t ng\u01b0\u1ee1ng th\u1ea5p.     </p> <p>Ta th\u1ea5y r\u1eb1ng thu\u1eadt to\u00e1n hysteresis thresholding v\u1eeba \u0111\u1ea3m b\u1ea3o kh\u00f4ng b\u1ecb nh\u1eadn di\u1ec7n thi\u1ebfu qu\u00e1 nhi\u1ec1u c\u1ea1nh nh\u01b0 trong h\u00ecnh th\u1ee9 hai, v\u1eeba gi\u1ea3m thi\u1ec3u nhi\u1ec5u nh\u01b0 trong h\u00ecnh th\u1ee9 ba.</p>"},{"location":"blog/edge-detection/#63-thuat-toan-canny-edge-detection","title":"6.3. Thu\u1eadt to\u00e1n Canny Edge Detection","text":"\ud83d\udcd0 Thu\u1eadt to\u00e1n: <ol> <li>D\u00f9ng b\u1ed9 l\u1ecdc Gaussian \u0111\u1ec3 l\u1ecdc nhi\u1ec5u</li> <li>X\u1ea5p x\u1ec9 \u0111\u1ed9 l\u1edbn gradient v\u00e0 h\u01b0\u1edbng c\u1ee7a gradient cho t\u1eebng pixel trong \u1ea3nh</li> <li>D\u00f9ng non-maxima suppresion \u0111\u1ec3 \"l\u00e0m m\u1ecfng\" c\u1ea1nh, t\u1ee9c lo\u1ea1i b\u1ecf c\u00e1c pixel kh\u00f4ng c\u1ea7n thi\u1ebft</li> <li>D\u00f9ng hysteresis thresholding \u0111\u1ec3 nh\u1eadn di\u1ec7n c\u1ea1nh</li> </ol> <p>      H\u00ecnh 20: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c c\u1ee7a thu\u1eadt to\u00e1n Canny Edge Detection \u0111\u1ed1i v\u1edbi c\u00e1c c\u00e1ch ch\u1ecdn ng\u01b0\u1ee1ng kh\u00e1c nhau. H\u00ecnh 1: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c sau khi t\u00ednh to\u00e1n \u0111\u1ed9 l\u1edbn gradient (\u1ea3nh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e2n ng\u01b0\u1ee1ng). H\u00ecnh 2, 3, 4: K\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c sau khi \u00e1p d\u1ee5ng hysteresis thresholding v\u1edbi c\u00e1c ng\u01b0\u1ee1ng \\(T_1\\), \\(T_2\\) kh\u00e1c nhau.     </p> <p>M\u1ed9t s\u1ed1 l\u01b0u \u00fd:</p> <ul> <li>\u0110\u1ec3 c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh b\u01b0\u1edbc 4: d\u00f9ng m\u1ed9t ng\u01b0\u1ee1ng \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh xem m\u1ed9t pixel b\u1ea5t k\u00ec c\u00f3 l\u00e0 c\u1ea1nh hay kh\u00f4ng, ta c\u1ea7n gi\u1eef l\u1ea1i gi\u00e1 tr\u1ecb \u0111\u1ed9 l\u1edbn gradient c\u1ee7a m\u1ed7i pixel \u1edf b\u01b0\u1edbc 3.</li> <li>\u0110\u1ebfn \u0111\u00e2y n\u1ebfu b\u1ea1n \u0111\u1ecdc th\u1eafc m\u1eafc r\u1eb1ng v\u00ec sao l\u1ea1i c\u1ea7n b\u01b0\u1edbc thresholding \u1edf cu\u1ed1i khi b\u1ee9c \u1ea3nh thu \u0111\u01b0\u1ee3c sau khi d\u00f9ng non-maxima suppression \u0111\u00e3 cho ra h\u00ecnh d\u00e1ng c\u1ea1nh nh\u01b0 ta mong mu\u1ed1n, b\u1ea1n c\u00f3 th\u1ec3 xem l\u1ea1i ph\u1ea7n 2 m\u1ee5c 3, kh\u00f4ng nh\u1eefng th\u1ebf, k\u0129 thu\u1eadt \u0111\u1eb7c bi\u1ec7t c\u1ee7a hysteresis thresholding c\u00f2n g\u00f3p ph\u1ea7n gi\u1ea3m \u0111i m\u1ed9t l\u01b0\u1ee3ng nhi\u1ec5u \u0111\u00e1ng k\u1ec3 (do nhi\u1ec5u th\u01b0\u1eddng r\u1eddi r\u1ea1c, kh\u00f4ng \"k\u1ebft n\u1ed1i\" v\u1edbi nhau).</li> <li>\u1ede thu\u1eadt to\u00e1n non-maxima suppression, thay v\u00ec so s\u00e1nh gi\u00e1 tr\u1ecb \u0111\u1ed9 l\u1edbn gradient m\u1ed9t pixel v\u1edbi hai pixel l\u00e2n c\u1eadn \u0111\u1ec3 gi\u1eef l\u1ea1i pixel c\u00f3 gi\u00e1 tr\u1ecb c\u1ef1c \u0111\u1ea1i, ta c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng to\u00e1n t\u1eed Laplacian nh\u01b0ng theo m\u1ed9t chi\u1ec1u (chi\u1ec1u c\u1ee7a gradient) ho\u1eb7c \u0111\u1ea1o h\u00e0m c\u1ea5p hai c\u00f3 h\u01b0\u1edbng v\u00e0 gi\u1eef l\u1ea1i pixel \u1edf v\u1ecb tr\u00ed v\u1ec1 kh\u00f4ng.</li> </ul>"},{"location":"blog/edge-detection/#7-ket-luan","title":"7. K\u1ebft lu\u1eadn","text":"<p>\u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta c\u00f3 \u0111\u1ec1 c\u1eadp \u0111\u1ebfn m\u1ed9t kh\u00e1i ni\u1ec7m kh\u00f4ng d\u00f9ng nhi\u1ec1u trong b\u00e0i vi\u1ebft n\u00e0y, \u0111\u00f3 l\u00e0 contour. \u0110\u1ea7u ra c\u1ee7a b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh ch\u1ec9 l\u00e0 c\u00e1c \u0111i\u1ec3m c\u1ea1nh r\u1eddi r\u1ea1c, m\u1eb7c d\u00f9 nh\u00ecn b\u1eb1ng m\u1eaft th\u01b0\u1eddng, ta c\u00f3 c\u1ea3m gi\u00e1c nh\u01b0 \u0111\u00f3 \u0111\u00e3 l\u00e0 c\u00e1c \u0111\u01b0\u1eddng bi\u00ean, v\u00ec m\u1eaft ta c\u00f3 kh\u1ea3 n\u0103ng t\u1ef1 \"k\u1ebft n\u1ed1i\" c\u00e1c \u0111i\u1ec3m r\u1eddi r\u1ea1c n\u00e0y v\u1edbi nhau. N\u1ebfu mu\u1ed1n thu \u0111\u01b0\u1ee3c \u0111\u01b0\u1eddng bi\u00ean li\u00ean t\u1ee5c c\u1ee7a v\u1eadt th\u1ec3, ho\u1eb7c \u0111\u00e1nh th\u1ee9 t\u1ef1 c\u00e1c \u0111i\u1ec3m c\u1ea1nh n\u00e0y \u0111\u1ec3 c\u00f3 th\u1ec3 n\u1ed1i ch\u00fang l\u1ea1i v\u1edbi nhau t\u1ea1o th\u00e0nh m\u1ed9t \u0111\u01b0\u1eddng li\u1ec1n m\u1ea1ch, ta s\u1ebd \u0111\u1ebfn v\u1edbi m\u1ed9t b\u00e0i to\u00e1n m\u1edbi, \u0111\u00f3 l\u00e0 b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n \u0111\u01b0\u1eddng bi\u00ean (Boundary detection).</p> <p>Qua b\u00e0i vi\u1ebft n\u00e0y, b\u1ea1n \u0111\u1ecdc \u0111\u00e3 c\u00f3 m\u1ed9t c\u00e1i nh\u00ecn to\u00e0n c\u1ea3nh v\u1ec1 b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh, c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn b\u00e0i to\u00e1n, c\u00e1c v\u1ea5n \u0111\u1ec1 th\u01b0\u1eddng g\u1eb7p \u0111\u1ed1i v\u1edbi b\u00e0i to\u00e1n n\u00e0y c\u0169ng nh\u01b0 c\u00e1c thu\u1eadt to\u00e1n th\u00f4ng d\u1ee5ng \u0111\u01b0\u1ee3c \u0111\u1ec1 xu\u1ea5t. Vi\u1ec7c c\u1ed1 g\u1eafng bao tr\u00f9m v\u1ec1 b\u1ec1 r\u1ed9ng ch\u1eafc ch\u1eafn s\u1ebd khi\u1ebfn b\u00e0i vi\u1ebft kh\u00f4ng \u0111\u1ea1t \u0111\u01b0\u1ee3c ti\u00eau ch\u00ed v\u1ec1 b\u1ec1 s\u00e2u, \u0111\u1ed3ng th\u1eddi m\u1ed9t v\u00e0i kh\u00e1i ni\u1ec7m c\u0169ng \u0111\u01b0\u1ee3c \u0111\u01a1n gi\u1ea3n h\u00f3a, nh\u01b0ng qua \u0111\u00f3 m\u00ecnh mong r\u1eb1ng b\u00e0i vi\u1ebft s\u1ebd cung c\u1ea5p cho b\u1ea1n \u0111\u1ecdc m\u1ed9t h\u00ecnh dung nh\u1ea5t \u0111\u1ecbnh v\u1ec1 b\u00e0i to\u00e1n n\u00e0y, \u0111\u1ed3ng th\u1eddi kh\u01a1i g\u1ee3i s\u1ef1 t\u00f2 m\u00f2, h\u1ee9ng th\u00fa c\u1ee7a b\u1ea1n \u0111\u1ecdc, \u0111\u1ec3 t\u1eeb \u0111\u00f3 vi\u1ec7c \u0111\u00e0o s\u00e2u v\u00e0o c\u00e1c ch\u1ee7 \u0111\u1ec1 n\u00e2ng cao v\u00e0 th\u00fa v\u1ecb kh\u00e1c c\u0169ng tr\u1edf n\u00ean d\u1ec5 d\u00e0ng h\u01a1n (m\u1ed9t s\u1ed1 ch\u1ee7 \u0111\u1ec1 c\u0169ng th\u00fa v\u1ecb kh\u00f4ng k\u00e9m trong b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh m\u00e0 b\u1ea1n \u0111\u1ecdc c\u00f3 th\u1ec3 ti\u1ebfp t\u1ee5c t\u00ecm hi\u1ec3u nh\u01b0: s\u1ef1 k\u1ebft h\u1ee3p gi\u1eefa Fourier Transform v\u00e0 High-pass filter trong b\u00e0i to\u00e1n nh\u1eadn di\u1ec7n c\u1ea1nh, hay k\u0129 thu\u1eadt Image approximation \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed c\u1ea1nh \u1edf m\u1ee9c \u0111\u1ed9 subpixel,...)</p>"},{"location":"blog/edge-detection/#8-tham-khao","title":"8. Tham kh\u1ea3o","text":"<ol> <li>Jain, R., Kasturi, R., &amp; Schunck, B. G. (1995). Machine vision (Vol. 5, pp. 309-364). New York: McGraw-hill.</li> <li> <p>First Principles of Computer Vision. (n.d.). https://fpcv.cs.columbia.edu/ </p> </li> <li> <p>6.2. Ph\u00e9p T\u00edch ch\u1eadp cho \u1ea2nh \u2014 \u0110\u1eafm m\u00ecnh v\u00e0o H\u1ecdc S\u00e2u 0.14.4 documentation. (n.d.). https://d2l.aivivn.com/chapter_convolutional-neural-networks/conv-layer_vn.html </p> </li> <li> <p>Nalwa, V. S. (1994). A guided tour of computer vision. Addison-Wesley Longman Publishing Co., Inc.</p> </li> <li>OpenCV: Canny Edge Detection. (n.d.). https://docs.opencv.org/3.4/da/d22/tutorial_py_canny.html</li> </ol>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/engineering/","title":"Engineering","text":""},{"location":"blog/category/research/","title":"Research","text":""}]}